/**
 * Script de teste para verificar a corre√ß√£o do problema de subscription_usage
 * Execute este script no console do navegador na p√°gina da aplica√ß√£o
 */

(async function testSubscriptionFix() {
  console.log('üîç Iniciando teste da corre√ß√£o do subscription_usage...');
  
  try {
    // Verificar se o usu√°rio est√° autenticado
    const { data: { user } } = await window.supabase.auth.getUser();
    
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.id);
    
    // Verificar se existe registro de subscription_usage
    const { data: usageData, error: usageError } = await window.supabase
      .from('subscription_usage')
      .select('*')
      .eq('user_id', user.id)
      .single();
    
    if (usageError && usageError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar subscription_usage:', usageError);
      return;
    }
    
    if (usageData) {
      console.log('‚úÖ Registro de subscription_usage encontrado:', usageData);
    } else {
      console.log('‚ö†Ô∏è Registro de subscription_usage n√£o encontrado');
      
      // Tentar inicializar via API
      console.log('üîß Tentando inicializar via API...');
      
      const { data: { session } } = await window.supabase.auth.getSession();
      
      if (!session?.access_token) {
        console.error('‚ùå Token de acesso n√£o encontrado');
        return;
      }
      
      const response = await fetch('/api/subscription/initialize-usage', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });
      
      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Subscription usage inicializado via API:', result);
      } else {
        console.error('‚ùå Erro ao inicializar via API:', result);
        return;
      }
    }
    
    // Verificar subscription do usu√°rio
    const { data: subscriptionData, error: subError } = await window.supabase
      .from('user_subscriptions')
      .select(`
        *,
        subscription_plans(*)
      `)
      .eq('user_id', user.id)
      .eq('status', 'active')
      .single();
    
    if (subError) {
      console.error('‚ùå Erro ao verificar subscription:', subError);
      return;
    }
    
    console.log('‚úÖ Subscription ativa encontrada:', subscriptionData);
    
    // Testar adi√ß√£o de uma quest√£o simples
    console.log('üß™ Testando adi√ß√£o de quest√£o...');
    
    const testQuestion = {
      content: 'Quest√£o de teste para verificar corre√ß√£o do erro 406',
      question_type: 'multiple_choice',
      difficulty: 'baixa',
      explanation: 'Esta √© uma quest√£o de teste criada automaticamente.',
      discipline_id: 1, // Assumindo que existe disciplina com ID 1
      subject_id: 1     // Assumindo que existe mat√©ria com ID 1
    };
    
    const testAnswers = [
      { text: 'Op√ß√£o A', is_correct: true },
      { text: 'Op√ß√£o B', is_correct: false },
      { text: 'Op√ß√£o C', is_correct: false },
      { text: 'Op√ß√£o D', is_correct: false }
    ];
    
    // Tentar inserir quest√£o diretamente
    const { data: questionData, error: questionError } = await window.supabase
      .from('questions')
      .insert([{
        ...testQuestion,
        user_id: user.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select('id')
      .single();
    
    if (questionError) {
      console.error('‚ùå Erro ao inserir quest√£o de teste:', questionError);
      
      if (questionError.message.includes('406') || 
          questionError.message.includes('limit') ||
          questionError.code === 'P0001') {
        console.log('‚ö†Ô∏è Erro 406 detectado - o trigger ainda est√° causando problemas');
        console.log('üí° Recomenda√ß√£o: Execute a migra√ß√£o SQL fornecida no banco de dados');
      }
      
      return;
    }
    
    console.log('‚úÖ Quest√£o de teste inserida com sucesso:', questionData);
    
    // Inserir op√ß√µes de resposta
    const optionsWithQuestionId = testAnswers.map(option => ({
      ...option,
      question_id: questionData.id,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));
    
    const { error: optionsError } = await window.supabase
      .from('answer_options')
      .insert(optionsWithQuestionId);
    
    if (optionsError) {
      console.error('‚ùå Erro ao inserir op√ß√µes de resposta:', optionsError);
    } else {
      console.log('‚úÖ Op√ß√µes de resposta inseridas com sucesso');
    }
    
    // Limpar quest√£o de teste
    console.log('üßπ Removendo quest√£o de teste...');
    
    await window.supabase
      .from('answer_options')
      .delete()
      .eq('question_id', questionData.id);
    
    await window.supabase
      .from('questions')
      .delete()
      .eq('id', questionData.id);
    
    console.log('‚úÖ Quest√£o de teste removida');
    
    console.log('üéâ Teste conclu√≠do com sucesso! O problema foi corrigido.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
})();

console.log('üìã Para executar o teste, cole este c√≥digo no console do navegador na p√°gina da aplica√ß√£o.');
console.log('üîß Certifique-se de que window.supabase est√° dispon√≠vel.');