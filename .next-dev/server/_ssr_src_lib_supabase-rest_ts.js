"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_supabase-rest_ts";
exports.ids = ["_ssr_src_lib_supabase-rest_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/supabase-rest.ts":
/*!**********************************!*\
  !*** ./src/lib/supabase-rest.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisciplinesRestService: () => (/* binding */ DisciplinesRestService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./src/lib/supabase.ts\");\n// supabase-rest.ts\n// Serviço para acessar diretamente a API REST do Supabase\n\n/**\n * URL base para a API REST do Supabase\n * Formato: https://<project-ref>.supabase.co/rest/v1/\n */ const getSupabaseRestUrl = ()=>{\n    // Extrair a URL base do cliente Supabase\n    const supabaseUrl = \"https://ipfjehdwmenpaeuefntd.supabase.co\";\n    if (!supabaseUrl) {\n        throw new Error(\"NEXT_PUBLIC_SUPABASE_URL n\\xe3o est\\xe1 definido\");\n    }\n    return `${supabaseUrl}/rest/v1/`;\n};\n/**\n * Obtém o token de autenticação atual\n */ const getAuthHeaders = async ()=>{\n    const { data } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getSession();\n    const token = data.session?.access_token;\n    const headers = {\n        \"apikey\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlwZmplaGR3bWVucGFldWVmbnRkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0ODc3NDYsImV4cCI6MjA2MjA2Mzc0Nn0.FWreWB4-_weiNoQlzoPissyaGELR23mWjcyePX_V0dI\" || 0,\n        \"Content-Type\": \"application/json\"\n    };\n    if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return headers;\n};\n/**\n * Garante que um usuário exista na tabela users\n * @param userId ID do usuário autenticado\n * @param email Email do usuário\n * @returns O registro do usuário\n */ const ensureUserExists = async (userId, email)=>{\n    try {\n        // Verificar se o usuário já existe na tabela users usando o cliente Supabase\n        const { data: userData, error: checkError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"*\").eq(\"user_id\", userId).limit(1);\n        if (checkError) {\n            console.error(\"Erro ao verificar usu\\xe1rio:\", checkError);\n            throw new Error(\"Erro ao verificar usu\\xe1rio\");\n        }\n        // Se o usuário já existe, retornar\n        if (userData && userData.length > 0) {\n            console.log(\"Usu\\xe1rio j\\xe1 existe na tabela users:\", userData[0]);\n            return userData[0];\n        }\n        // Se não existe, criar o usuário usando o cliente Supabase (respeitando RLS)\n        console.log(\"Criando registro de usu\\xe1rio na tabela users para:\", userId);\n        const userCreateData = {\n            user_id: userId,\n            email: email || `${userId}@example.com`,\n            name: email ? email.split(\"@\")[0] : \"Usu\\xe1rio\",\n            is_active: true\n        };\n        // Inserir usando o cliente Supabase\n        const { data: newUser, error: createError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").insert([\n            userCreateData\n        ]).select().single();\n        if (createError) {\n            console.error(\"Erro ao criar usu\\xe1rio na tabela users:\", createError);\n            // Tente habilitar temporariamente o modo de serviço para contornar RLS\n            // Nota: Isso só funciona se o usuário tiver permissões adequadas\n            console.log(\"Tentando criar usu\\xe1rio em modo de servi\\xe7o para contornar RLS...\");\n            // Logar informações de diagnóstico\n            console.log(\"Informa\\xe7\\xf5es do usu\\xe1rio atual:\");\n            const { data } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            console.log(\"- User ID:\", data.user?.id);\n            console.log(\"- Email:\", data.user?.email);\n            console.log(\"- Role:\", data.user?.role);\n            // Retornar um objeto temporário para continuar o fluxo\n            return {\n                id: null,\n                user_id: userId,\n                email: email || `${userId}@example.com`,\n                name: email ? email.split(\"@\")[0] : \"Usu\\xe1rio\",\n                is_active: true,\n                is_temporary: true\n            };\n        }\n        console.log(\"Usu\\xe1rio criado com sucesso na tabela users:\", newUser);\n        return newUser;\n    } catch (error) {\n        console.error(\"Erro ao sincronizar usu\\xe1rio:\", error);\n        // Retornar um objeto temporário para continuar o fluxo\n        return {\n            id: null,\n            user_id: userId,\n            email: email || `${userId}@example.com`,\n            name: email ? email.split(\"@\")[0] : \"Usu\\xe1rio\",\n            is_active: true,\n            is_temporary: true\n        };\n    }\n};\n/**\n * Serviço para manipulação de disciplinas usando a API REST do Supabase\n */ const DisciplinesRestService = {\n    /**\n   * Obtém todas as disciplinas\n   * @param onlyUser Se verdadeiro, retorna apenas as disciplinas do usuário atual\n   */ async getDisciplines (onlyUser = false) {\n        try {\n            const headers = await getAuthHeaders();\n            const url = `${getSupabaseRestUrl()}disciplines`;\n            // Adicionar parâmetros de consulta para filtrar apenas disciplinas do usuário\n            const queryParams = onlyUser ? `?user_id=eq.${(await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser()).data.user?.id}` : \"\";\n            const response = await fetch(`${url}${queryParams}`, {\n                method: \"GET\",\n                headers\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                console.error(\"Erro ao buscar disciplinas:\", error);\n                return [];\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao obter disciplinas:\", error);\n            return [];\n        }\n    },\n    /**\n   * Cria uma nova disciplina\n   * @param discipline Objeto da disciplina\n   */ async createDiscipline (discipline) {\n        try {\n            const { data: { user } } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            console.log(\"Criando disciplina para usu\\xe1rio:\", user.id, user.email);\n            // Garantir que o usuário exista na tabela users antes de criar a disciplina\n            const userInfo = await ensureUserExists(user.id, user.email);\n            console.log(\"Informa\\xe7\\xf5es do usu\\xe1rio:\", userInfo);\n            const headers = await getAuthHeaders();\n            const url = `${getSupabaseRestUrl()}disciplines`;\n            const disciplineData = {\n                name: discipline.name,\n                description: discipline.description || null,\n                theme: discipline.theme || null,\n                user_id: user.id // Sempre usar o ID do Auth\n            };\n            console.log(\"Dados da disciplina a serem enviados:\", disciplineData);\n            // Tentar criar a disciplina diretamente pelo cliente Supabase\n            const { data: newDiscipline, error: disciplineError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"disciplines\").insert([\n                disciplineData\n            ]).select().single();\n            if (disciplineError) {\n                console.error(\"Erro ao criar disciplina via cliente Supabase:\", disciplineError);\n                console.log(\"Tentando via API REST...\");\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers,\n                    body: JSON.stringify(disciplineData)\n                });\n                if (!response.ok) {\n                    const error = await response.json();\n                    console.error(\"Erro ao criar disciplina via API REST:\", error);\n                    // Último recurso: se disponível, tentar o serviço de adaptador\n                    try {\n                        console.log(\"Tentando criar disciplina usando adaptador de servi\\xe7o...\");\n                        const apiResponse = await fetch(\"/api/disciplines\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify(discipline)\n                        });\n                        if (!apiResponse.ok) {\n                            throw new Error(\"Falha no endpoint de API\");\n                        }\n                        const apiData = await apiResponse.json();\n                        return apiData.discipline;\n                    } catch (adaptError) {\n                        console.error(\"Falha em todas as tentativas de criar disciplina:\", adaptError);\n                        return null;\n                    }\n                }\n                const data = await response.json();\n                return data[0];\n            }\n            console.log(\"Disciplina criada com sucesso:\", newDiscipline);\n            return newDiscipline;\n        } catch (error) {\n            console.error(\"Erro ao criar disciplina:\", error);\n            return null;\n        }\n    },\n    /**\n   * Obtém os assuntos de uma disciplina\n   * @param disciplineId ID da disciplina\n   */ async getSubjects (disciplineId) {\n        try {\n            const headers = await getAuthHeaders();\n            const url = `${getSupabaseRestUrl()}subjects?discipline_id=eq.${disciplineId}`;\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                console.error(\"Erro ao buscar assuntos:\", error);\n                return [];\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao buscar assuntos da disciplina:\", error);\n            return [];\n        }\n    },\n    /**\n   * Cria um novo assunto para uma disciplina\n   * @param disciplineId ID da disciplina\n   * @param title Título do assunto\n   * @param content Conteúdo do assunto (opcional)\n   * @param difficulty Dificuldade do assunto (opcional)\n   * @param importance Importância do assunto (opcional)\n   * @param estimatedHours Horas estimadas de estudo (opcional)\n   */ async createSubject (disciplineId, title, content, difficulty = \"m\\xe9dia\", importance = \"m\\xe9dia\", estimatedHours = 2) {\n        try {\n            const { data: { user } } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            console.log(\"Criando assunto para usu\\xe1rio:\", user.id, user.email);\n            // Garantir que o usuário exista na tabela users antes de criar o assunto\n            const userInfo = await ensureUserExists(user.id, user.email);\n            console.log(\"Informa\\xe7\\xf5es do usu\\xe1rio:\", userInfo);\n            const headers = await getAuthHeaders();\n            const url = `${getSupabaseRestUrl()}subjects`;\n            const subjectData = {\n                discipline_id: disciplineId,\n                user_id: user.id,\n                title,\n                content: content || null,\n                status: \"pending\",\n                due_date: null,\n                difficulty,\n                importance,\n                estimated_hours: estimatedHours,\n                name: title // Restaurar o campo de compatibilidade\n            };\n            console.log(\"Dados do assunto a serem enviados:\", subjectData);\n            // Tentar criar o assunto diretamente pelo cliente Supabase\n            const { data: newSubject, error: subjectError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"subjects\").insert([\n                subjectData\n            ]).select().single();\n            if (subjectError) {\n                console.error(\"Erro ao criar assunto via cliente Supabase:\", subjectError);\n                console.log(\"Tentando via API REST...\");\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers,\n                    body: JSON.stringify(subjectData)\n                });\n                if (!response.ok) {\n                    const error = await response.json();\n                    console.error(\"Erro ao criar assunto via API REST:\", error);\n                    return null;\n                }\n                const data = await response.json();\n                return data[0];\n            }\n            console.log(\"Assunto criado com sucesso:\", newSubject);\n            return newSubject;\n        } catch (error) {\n            console.error(\"Erro ao criar assunto:\", error);\n            return null;\n        }\n    },\n    /**\n   * Remove uma disciplina\n   * @param disciplineId ID da disciplina a ser removida\n   */ async deleteDiscipline (disciplineId) {\n        try {\n            const { data: { user } } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            console.log(\"Removendo disciplina:\", disciplineId);\n            const headers = await getAuthHeaders();\n            const url = `${getSupabaseRestUrl()}disciplines?id=eq.${disciplineId}`;\n            // Verificar se a disciplina pertence ao usuário atual\n            const { data: discipline, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"disciplines\").select(\"*\").eq(\"id\", disciplineId).single();\n            if (fetchError) {\n                console.error(\"Erro ao verificar disciplina:\", fetchError);\n                return false;\n            }\n            if (!discipline) {\n                console.error(\"Disciplina n\\xe3o encontrada\");\n                return false;\n            }\n            if (discipline.user_id !== user.id) {\n                console.error(\"Sem permiss\\xe3o para excluir essa disciplina\");\n                return false;\n            }\n            // Tentar excluir a disciplina diretamente pelo cliente Supabase\n            const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"disciplines\").delete().eq(\"id\", disciplineId);\n            if (deleteError) {\n                console.error(\"Erro ao excluir disciplina via cliente Supabase:\", deleteError);\n                console.log(\"Tentando via API REST...\");\n                const response = await fetch(url, {\n                    method: \"DELETE\",\n                    headers\n                });\n                if (!response.ok) {\n                    const error = await response.json();\n                    console.error(\"Erro ao excluir disciplina via API REST:\", error);\n                    return false;\n                }\n                return response.status === 204 || response.status === 200;\n            }\n            console.log(\"Disciplina exclu\\xedda com sucesso\");\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao excluir disciplina:\", error);\n            return false;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/supabase-rest.ts\n");

/***/ })

};
;