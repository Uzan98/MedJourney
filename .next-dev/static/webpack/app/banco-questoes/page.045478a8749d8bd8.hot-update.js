"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/banco-questoes/page",{

/***/ "(app-pages-browser)/./src/services/questions-bank.service.ts":
/*!************************************************!*\
  !*** ./src/services/questions-bank.service.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuestionsBankService: function() { return /* binding */ QuestionsBankService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n\n\nclass QuestionsBankService {\n    /**\r\n   * Busca todas as questões do usuário atual\r\n   */ static async getUserQuestions() {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"user_id\", user.user.id).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xf5es:\", error);\n            return [];\n        }\n    }\n    /**\r\n   * Busca uma questão específica pelo ID\r\n   */ static async getQuestionById(id) {\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                throw error;\n            }\n            // Carregar as opções de resposta se for uma questão de múltipla escolha ou V/F\n            if (data && (data.question_type === \"multiple_choice\" || data.question_type === \"true_false\")) {\n                const options = await this.getAnswerOptions(data.id);\n                data.answer_options = options;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xe3o \".concat(id, \":\"), error);\n            return null;\n        }\n    }\n    /**\r\n   * Busca as opções de resposta para uma questão específica\r\n   */ static async getAnswerOptions(questionId) {\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").select(\"*\").eq(\"question_id\", questionId).order(\"id\");\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar op\\xe7\\xf5es de resposta para quest\\xe3o \".concat(questionId, \":\"), error);\n            return [];\n        }\n    }\n    /**\r\n   * Adiciona uma nova questão\r\n   */ static async addQuestion(question, answerOptions) {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            // Adiciona o user_id à questão\n            const newQuestion = {\n                ...question,\n                user_id: user.user.id,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            // Insere a questão\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").insert([\n                newQuestion\n            ]).select(\"id\").single();\n            if (error) {\n                throw error;\n            }\n            const questionId = data.id;\n            // Se houver opções de resposta e for uma questão de múltipla escolha ou V/F\n            if (answerOptions && answerOptions.length > 0 && (question.question_type === \"multiple_choice\" || question.question_type === \"true_false\")) {\n                // Adiciona o question_id às opções de resposta e remove os IDs temporários\n                const optionsWithQuestionId = answerOptions.map((option)=>{\n                    // Remove o campo id para que o Supabase gere um novo ID\n                    const { id, ...optionWithoutId } = option;\n                    return {\n                        ...optionWithoutId,\n                        question_id: questionId,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    };\n                });\n                // Insere as opções de resposta\n                const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").insert(optionsWithQuestionId);\n                if (optionsError) {\n                    console.error(\"Erro ao inserir op\\xe7\\xf5es de resposta:\", optionsError);\n                    throw optionsError;\n                }\n            }\n            return questionId;\n        } catch (error) {\n            console.error(\"Erro ao adicionar quest\\xe3o:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Erro ao adicionar quest\\xe3o: \" + error.message);\n            return null;\n        }\n    }\n    /**\r\n   * Alias para addQuestion, para compatibilidade com a interface\r\n   */ static async createQuestion(question, answerOptions) {\n        const questionId = await this.addQuestion(question, answerOptions);\n        if (questionId) {\n            return {\n                ...question,\n                id: questionId\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Atualiza uma questão existente\r\n   */ static async updateQuestion(id, question, answerOptions) {\n        try {\n            // Atualiza a questão\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").update({\n                ...question,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", id);\n            if (error) {\n                throw error;\n            }\n            // Se houver opções de resposta e for uma questão de múltipla escolha ou V/F\n            if (answerOptions && answerOptions.length > 0 && (question.question_type === \"multiple_choice\" || question.question_type === \"true_false\")) {\n                // Primeiro, exclui as opções de resposta existentes\n                const { error: deleteError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").delete().eq(\"question_id\", id);\n                if (deleteError) {\n                    throw deleteError;\n                }\n                // Adiciona o question_id às opções de resposta\n                const optionsWithQuestionId = answerOptions.map((option)=>({\n                        ...option,\n                        question_id: id,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    }));\n                // Insere as novas opções de resposta\n                const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").insert(optionsWithQuestionId);\n                if (optionsError) {\n                    throw optionsError;\n                }\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao atualizar quest\\xe3o \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n    /**\r\n   * Exclui uma questão e suas opções de resposta\r\n   */ static async deleteQuestion(id) {\n        try {\n            // Primeiro, exclui as opções de resposta associadas\n            const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").delete().eq(\"question_id\", id);\n            if (optionsError) {\n                throw optionsError;\n            }\n            // Em seguida, exclui a questão\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").delete().eq(\"id\", id);\n            if (error) {\n                throw error;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao excluir quest\\xe3o \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n    /**\r\n   * Busca questões com base em filtros\r\n   */ static async getFilteredQuestions(filters) {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            let query = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"user_id\", user.user.id);\n            // Aplica os filtros\n            if (filters.disciplineId) {\n                query = query.eq(\"discipline_id\", filters.disciplineId);\n            }\n            if (filters.subjectId) {\n                query = query.eq(\"subject_id\", filters.subjectId);\n            }\n            if (filters.difficulty) {\n                query = query.eq(\"difficulty\", filters.difficulty);\n            }\n            if (filters.questionType) {\n                query = query.eq(\"question_type\", filters.questionType);\n            }\n            if (filters.searchTerm) {\n                query = query.ilike(\"content\", \"%\".concat(filters.searchTerm, \"%\"));\n            }\n            const { data, error } = await query.order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao filtrar quest\\xf5es:\", error);\n            return [];\n        }\n    }\n    /**\r\n   * Verifica se as tabelas necessárias existem e contêm dados\r\n   */ static async checkTablesExist() {\n        try {\n            const { count, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            if (error) {\n                console.error(\"Erro ao verificar tabelas:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao verificar estrutura do banco de dados:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Gera dados de exemplo para o banco de questões\r\n   */ static getMockQuestions() {\n        return [\n            {\n                id: 1,\n                content: \"Qual \\xe9 o tratamento de primeira linha para hipertens\\xe3o em pacientes com diabetes?\",\n                explanation: \"O tratamento de primeira linha mais recomendado \\xe9 um inibidor da enzima conversora de angiotensina (IECA) ou bloqueador do receptor da angiotensina (BRA) devido \\xe0 prote\\xe7\\xe3o renal adicional.\",\n                discipline_id: 1,\n                subject_id: 3,\n                difficulty: \"m\\xe9dia\",\n                question_type: \"multiple_choice\",\n                tags: [\n                    \"hipertens\\xe3o\",\n                    \"diabetes\",\n                    \"tratamento\"\n                ],\n                created_at: \"2025-01-15T10:30:00Z\",\n                answer_options: [\n                    {\n                        id: 1,\n                        question_id: 1,\n                        text: \"IECA ou BRA\",\n                        is_correct: true\n                    },\n                    {\n                        id: 2,\n                        question_id: 1,\n                        text: \"Beta-bloqueadores\",\n                        is_correct: false\n                    },\n                    {\n                        id: 3,\n                        question_id: 1,\n                        text: \"Bloqueadores de canais de c\\xe1lcio\",\n                        is_correct: false\n                    },\n                    {\n                        id: 4,\n                        question_id: 1,\n                        text: \"Diur\\xe9ticos tiaz\\xeddicos\",\n                        is_correct: false\n                    }\n                ]\n            },\n            {\n                id: 2,\n                content: \"Pacientes com fibrila\\xe7\\xe3o atrial devem sempre receber anticoagula\\xe7\\xe3o.\",\n                explanation: \"Falso. A decis\\xe3o sobre anticoagula\\xe7\\xe3o em pacientes com fibrila\\xe7\\xe3o atrial deve ser baseada na avalia\\xe7\\xe3o de risco de AVC (ex.: escore CHA2DS2-VASc) e no risco de sangramento (ex.: escore HAS-BLED).\",\n                discipline_id: 1,\n                subject_id: 4,\n                difficulty: \"baixa\",\n                question_type: \"true_false\",\n                correct_answer: \"false\",\n                tags: [\n                    \"fibrila\\xe7\\xe3o atrial\",\n                    \"anticoagula\\xe7\\xe3o\",\n                    \"cardiologia\"\n                ],\n                created_at: \"2025-01-20T14:45:00Z\"\n            },\n            {\n                id: 3,\n                content: \"Descreva os mecanismos fisiopatol\\xf3gicos da insufici\\xeancia card\\xedaca com fra\\xe7\\xe3o de eje\\xe7\\xe3o preservada (ICFEp).\",\n                explanation: \"A ICFEp \\xe9 caracterizada por disfun\\xe7\\xe3o diast\\xf3lica, rigidez ventricular, fibrose mioc\\xe1rdica, diminui\\xe7\\xe3o da complac\\xeancia ventricular, disfun\\xe7\\xe3o microvascular e inflama\\xe7\\xe3o. A disfun\\xe7\\xe3o diast\\xf3lica resulta em press\\xf5es de enchimento elevadas, causando sintomas de congest\\xe3o pulmonar e edema.\",\n                discipline_id: 1,\n                subject_id: 5,\n                difficulty: \"alta\",\n                question_type: \"essay\",\n                tags: [\n                    \"insufici\\xeancia card\\xedaca\",\n                    \"fisiopatologia\",\n                    \"fra\\xe7\\xe3o de eje\\xe7\\xe3o preservada\"\n                ],\n                created_at: \"2025-01-25T09:15:00Z\"\n            },\n            {\n                id: 4,\n                content: \"Qual dos seguintes n\\xe3o \\xe9 considerado um sinal cl\\xe1ssico de Parkinsonismo?\",\n                explanation: \"Os sinais cl\\xe1ssicos do Parkinsonismo incluem tremor de repouso, rigidez, bradicinesia e instabilidade postural. A coreia (movimentos involunt\\xe1rios, r\\xe1pidos e irregulares) \\xe9 caracter\\xedsticamente associada \\xe0 doen\\xe7a de Huntington, n\\xe3o ao Parkinsonismo.\",\n                discipline_id: 2,\n                subject_id: 8,\n                difficulty: \"m\\xe9dia\",\n                question_type: \"multiple_choice\",\n                tags: [\n                    \"neurologia\",\n                    \"parkinson\",\n                    \"diagn\\xf3stico\"\n                ],\n                created_at: \"2025-02-05T11:20:00Z\",\n                answer_options: [\n                    {\n                        id: 5,\n                        question_id: 4,\n                        text: \"Tremor de repouso\",\n                        is_correct: false\n                    },\n                    {\n                        id: 6,\n                        question_id: 4,\n                        text: \"Rigidez\",\n                        is_correct: false\n                    },\n                    {\n                        id: 7,\n                        question_id: 4,\n                        text: \"Coreia\",\n                        is_correct: true\n                    },\n                    {\n                        id: 8,\n                        question_id: 4,\n                        text: \"Bradicinesia\",\n                        is_correct: false\n                    }\n                ]\n            },\n            {\n                id: 5,\n                content: \"A cetoacidose diab\\xe9tica \\xe9 uma emerg\\xeancia m\\xe9dica que ocorre predominantemente em pacientes com diabetes tipo 2.\",\n                explanation: \"Falso. A cetoacidose diab\\xe9tica ocorre predominantemente em pacientes com diabetes tipo 1, embora possa ocorrer em diabetes tipo 2 em situa\\xe7\\xf5es de estresse extremo (como infec\\xe7\\xf5es graves, trauma ou cirurgia).\",\n                discipline_id: 3,\n                subject_id: 12,\n                difficulty: \"baixa\",\n                question_type: \"true_false\",\n                correct_answer: \"false\",\n                tags: [\n                    \"diabetes\",\n                    \"emerg\\xeancia\",\n                    \"cetoacidose\"\n                ],\n                created_at: \"2025-02-10T16:05:00Z\"\n            }\n        ];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9xdWVzdGlvbnMtYmFuay5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNGO0FBMkJqQyxNQUFNRTtJQUNYOztHQUVDLEdBQ0QsYUFBYUMsbUJBQXdDO1FBQ25ELElBQUk7WUFDRixNQUFNLEVBQUVDLE1BQU1DLElBQUksRUFBRSxHQUFHLE1BQU1MLG1EQUFRQSxDQUFDTSxJQUFJLENBQUNDLE9BQU87WUFFbEQsSUFBSSxDQUFDRixRQUFRLENBQUNBLEtBQUtBLElBQUksRUFBRTtnQkFDdkIsTUFBTSxJQUFJRyxNQUFNO1lBQ2xCO1lBRUEsTUFBTSxFQUFFSixJQUFJLEVBQUVLLEtBQUssRUFBRSxHQUFHLE1BQU1ULG1EQUFRQSxDQUNuQ1UsSUFBSSxDQUFDLGFBQ0xDLE1BQU0sQ0FBQyxLQUNQQyxFQUFFLENBQUMsV0FBV1AsS0FBS0EsSUFBSSxDQUFDUSxFQUFFLEVBQzFCQyxLQUFLLENBQUMsY0FBYztnQkFBRUMsV0FBVztZQUFNO1lBRTFDLElBQUlOLE9BQU87Z0JBQ1QsTUFBTUE7WUFDUjtZQUVBLE9BQU9MLFFBQVEsRUFBRTtRQUNuQixFQUFFLE9BQU9LLE9BQU87WUFDZE8sUUFBUVAsS0FBSyxDQUFDLCtCQUE0QkE7WUFDMUMsT0FBTyxFQUFFO1FBQ1g7SUFDRjtJQUVBOztHQUVDLEdBQ0QsYUFBYVEsZ0JBQWdCSixFQUFVLEVBQTRCO1FBQ2pFLElBQUk7WUFDRixNQUFNLEVBQUVULElBQUksRUFBRUssS0FBSyxFQUFFLEdBQUcsTUFBTVQsbURBQVFBLENBQ25DVSxJQUFJLENBQUMsYUFDTEMsTUFBTSxDQUFDLEtBQ1BDLEVBQUUsQ0FBQyxNQUFNQyxJQUNUSyxNQUFNO1lBRVQsSUFBSVQsT0FBTztnQkFDVCxNQUFNQTtZQUNSO1lBRUEsK0VBQStFO1lBQy9FLElBQUlMLFFBQVNBLENBQUFBLEtBQUtlLGFBQWEsS0FBSyxxQkFBcUJmLEtBQUtlLGFBQWEsS0FBSyxZQUFX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QUNkO1lBQ0E7Z0JBQ0VoQixJQUFJO2dCQUNKZ0QsU0FBUztnQkFDVEMsYUFBYTtnQkFDYkMsZUFBZTtnQkFDZkMsWUFBWTtnQkFDWlgsWUFBWTtnQkFDWmxDLGVBQWU7Z0JBQ2Y4QyxNQUFNO29CQUFDO29CQUFjO29CQUFhO2lCQUFjO2dCQUNoRHBDLFlBQVk7Z0JBQ1pQLGdCQUFnQjtvQkFDZDt3QkFBRVQsSUFBSTt3QkFBRzBCLGFBQWE7d0JBQUcyQixNQUFNO3dCQUFxQkMsWUFBWTtvQkFBTTtvQkFDdEU7d0JBQUV0RCxJQUFJO3dCQUFHMEIsYUFBYTt3QkFBRzJCLE1BQU07d0JBQVdDLFlBQVk7b0JBQU07b0JBQzVEO3dCQUFFdEQsSUFBSTt3QkFBRzBCLGFBQWE7d0JBQUcyQixNQUFNO3dCQUFVQyxZQUFZO29CQUFLO29CQUMxRDt3QkFBRXRELElBQUk7d0JBQUcwQixhQUFhO3dCQUFHMkIsTUFBTTt3QkFBZ0JDLFlBQVk7b0JBQU07aUJBQ2xFO1lBQ0g7WUFDQTtnQkFDRXRELElBQUk7Z0JBQ0pnRCxTQUFTO2dCQUNUQyxhQUFhO2dCQUNiQyxlQUFlO2dCQUNmQyxZQUFZO2dCQUNaWCxZQUFZO2dCQUNabEMsZUFBZTtnQkFDZmlELGdCQUFnQjtnQkFDaEJILE1BQU07b0JBQUM7b0JBQVk7b0JBQWM7aUJBQWM7Z0JBQy9DcEMsWUFBWTtZQUNkO1NBQ0Q7SUFDSDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zZXJ2aWNlcy9xdWVzdGlvbnMtYmFuay5zZXJ2aWNlLnRzPzhlMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tICdAL2xpYi9zdXBhYmFzZSc7XHJcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSAncmVhY3QtaG90LXRvYXN0JztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUXVlc3Rpb24ge1xyXG4gIGlkPzogbnVtYmVyO1xyXG4gIHVzZXJfaWQ/OiBzdHJpbmc7XHJcbiAgZGlzY2lwbGluZV9pZD86IG51bWJlcjtcclxuICBzdWJqZWN0X2lkPzogbnVtYmVyO1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICBleHBsYW5hdGlvbj86IHN0cmluZztcclxuICBkaWZmaWN1bHR5PzogJ2JhaXhhJyB8ICdtw6lkaWEnIHwgJ2FsdGEnO1xyXG4gIHF1ZXN0aW9uX3R5cGU/OiAnbXVsdGlwbGVfY2hvaWNlJyB8ICd0cnVlX2ZhbHNlJyB8ICdlc3NheSc7XHJcbiAgY29ycmVjdF9hbnN3ZXI/OiBzdHJpbmc7XHJcbiAgdGFncz86IHN0cmluZ1tdO1xyXG4gIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XHJcbiAgdXBkYXRlZF9hdD86IHN0cmluZztcclxuICBhbnN3ZXJfb3B0aW9ucz86IEFuc3dlck9wdGlvbltdOyAvLyBSZWZlcsOqbmNpYSDDoHMgb3DDp8O1ZXMgZGUgcmVzcG9zdGFcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBbnN3ZXJPcHRpb24ge1xyXG4gIGlkPzogbnVtYmVyIHwgc3RyaW5nO1xyXG4gIHF1ZXN0aW9uX2lkOiBudW1iZXI7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIGlzX2NvcnJlY3Q6IGJvb2xlYW47XHJcbiAgY3JlYXRlZF9hdD86IHN0cmluZztcclxuICB1cGRhdGVkX2F0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlc3Rpb25zQmFua1NlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIEJ1c2NhIHRvZGFzIGFzIHF1ZXN0w7VlcyBkbyB1c3XDoXJpbyBhdHVhbFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBnZXRVc2VyUXVlc3Rpb25zKCk6IFByb21pc2U8UXVlc3Rpb25bXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBkYXRhOiB1c2VyIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghdXNlciB8fCAhdXNlci51c2VyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc3XDoXJpbyBuw6NvIGF1dGVudGljYWRvJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3F1ZXN0aW9ucycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci51c2VyLmlkKVxyXG4gICAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuXHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZGF0YSB8fCBbXTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gYnVzY2FyIHF1ZXN0w7VlczonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1c2NhIHVtYSBxdWVzdMOjbyBlc3BlY8OtZmljYSBwZWxvIElEXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGdldFF1ZXN0aW9uQnlJZChpZDogbnVtYmVyKTogUHJvbWlzZTxRdWVzdGlvbiB8IG51bGw+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3F1ZXN0aW9ucycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgICAgLmVxKCdpZCcsIGlkKVxyXG4gICAgICAgIC5zaW5nbGUoKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBDYXJyZWdhciBhcyBvcMOnw7VlcyBkZSByZXNwb3N0YSBzZSBmb3IgdW1hIHF1ZXN0w6NvIGRlIG3Dumx0aXBsYSBlc2NvbGhhIG91IFYvRlxyXG4gICAgICBpZiAoZGF0YSAmJiAoZGF0YS5xdWVzdGlvbl90eXBlID09PSAnbXVsdGlwbGVfY2hvaWNlJyB8fCBkYXRhLnF1ZXN0aW9uX3R5cGUgPT09ICd0cnVlX2ZhbHNlJykpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgdGhpcy5nZXRBbnN3ZXJPcHRpb25zKGRhdGEuaWQgYXMgbnVtYmVyKTtcclxuICAgICAgICBkYXRhLmFuc3dlcl9vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvIGFvIGJ1c2NhciBxdWVzdMOjbyAke2lkfTpgLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBCdXNjYSBhcyBvcMOnw7VlcyBkZSByZXNwb3N0YSBwYXJhIHVtYSBxdWVzdMOjbyBlc3BlY8OtZmljYVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBnZXRBbnN3ZXJPcHRpb25zKHF1ZXN0aW9uSWQ6IG51bWJlcik6IFByb21pc2U8QW5zd2VyT3B0aW9uW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ2Fuc3dlcl9vcHRpb25zJylcclxuICAgICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgICAuZXEoJ3F1ZXN0aW9uX2lkJywgcXVlc3Rpb25JZClcclxuICAgICAgICAub3JkZXIoJ2lkJyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGRhdGEgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvIGFvIGJ1c2NhciBvcMOnw7VlcyBkZSByZXNwb3N0YSBwYXJhIHF1ZXN0w6NvICR7cXVlc3Rpb25JZH06YCwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEFkaWNpb25hIHVtYSBub3ZhIHF1ZXN0w6NvXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGFkZFF1ZXN0aW9uKHF1ZXN0aW9uOiBRdWVzdGlvbiwgYW5zd2VyT3B0aW9ucz86IEFuc3dlck9wdGlvbltdKTogUHJvbWlzZTxudW1iZXIgfCBudWxsPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IGRhdGE6IHVzZXIgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0VXNlcigpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF1c2VyIHx8ICF1c2VyLnVzZXIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzdcOhcmlvIG7Do28gYXV0ZW50aWNhZG8nKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQWRpY2lvbmEgbyB1c2VyX2lkIMOgIHF1ZXN0w6NvXHJcbiAgICAgIGNvbnN0IG5ld1F1ZXN0aW9uID0ge1xyXG4gICAgICAgIC4uLnF1ZXN0aW9uLFxyXG4gICAgICAgIHVzZXJfaWQ6IHVzZXIudXNlci5pZCxcclxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICAvLyBJbnNlcmUgYSBxdWVzdMOjb1xyXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKCdxdWVzdGlvbnMnKVxyXG4gICAgICAgIC5pbnNlcnQoW25ld1F1ZXN0aW9uXSlcclxuICAgICAgICAuc2VsZWN0KCdpZCcpXHJcbiAgICAgICAgLnNpbmdsZSgpO1xyXG5cclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHF1ZXN0aW9uSWQgPSBkYXRhLmlkO1xyXG4gICAgICBcclxuICAgICAgLy8gU2UgaG91dmVyIG9ww6fDtWVzIGRlIHJlc3Bvc3RhIGUgZm9yIHVtYSBxdWVzdMOjbyBkZSBtw7psdGlwbGEgZXNjb2xoYSBvdSBWL0ZcclxuICAgICAgaWYgKGFuc3dlck9wdGlvbnMgJiYgYW5zd2VyT3B0aW9ucy5sZW5ndGggPiAwICYmIFxyXG4gICAgICAgICAgKHF1ZXN0aW9uLnF1ZXN0aW9uX3R5cGUgPT09ICdtdWx0aXBsZV9jaG9pY2UnIHx8IHF1ZXN0aW9uLnF1ZXN0aW9uX3R5cGUgPT09ICd0cnVlX2ZhbHNlJykpIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBBZGljaW9uYSBvIHF1ZXN0aW9uX2lkIMOgcyBvcMOnw7VlcyBkZSByZXNwb3N0YSBlIHJlbW92ZSBvcyBJRHMgdGVtcG9yw6FyaW9zXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uc1dpdGhRdWVzdGlvbklkID0gYW5zd2VyT3B0aW9ucy5tYXAob3B0aW9uID0+IHtcclxuICAgICAgICAgIC8vIFJlbW92ZSBvIGNhbXBvIGlkIHBhcmEgcXVlIG8gU3VwYWJhc2UgZ2VyZSB1bSBub3ZvIElEXHJcbiAgICAgICAgICBjb25zdCB7IGlkLCAuLi5vcHRpb25XaXRob3V0SWQgfSA9IG9wdGlvbjtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4ub3B0aW9uV2l0aG91dElkLFxyXG4gICAgICAgICAgICBxdWVzdGlvbl9pZDogcXVlc3Rpb25JZCxcclxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEluc2VyZSBhcyBvcMOnw7VlcyBkZSByZXNwb3N0YVxyXG4gICAgICAgIGNvbnN0IHsgZXJyb3I6IG9wdGlvbnNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAgIC5mcm9tKCdhbnN3ZXJfb3B0aW9ucycpXHJcbiAgICAgICAgICAuaW5zZXJ0KG9wdGlvbnNXaXRoUXVlc3Rpb25JZCk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zRXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gaW5zZXJpciBvcMOnw7VlcyBkZSByZXNwb3N0YTonLCBvcHRpb25zRXJyb3IpO1xyXG4gICAgICAgICAgdGhyb3cgb3B0aW9uc0Vycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHF1ZXN0aW9uSWQ7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvIGFvIGFkaWNpb25hciBxdWVzdMOjbzonLCBlcnJvcik7XHJcbiAgICAgIHRvYXN0LmVycm9yKCdFcnJvIGFvIGFkaWNpb25hciBxdWVzdMOjbzogJyArIChlcnJvciBhcyBhbnkpLm1lc3NhZ2UpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsaWFzIHBhcmEgYWRkUXVlc3Rpb24sIHBhcmEgY29tcGF0aWJpbGlkYWRlIGNvbSBhIGludGVyZmFjZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVRdWVzdGlvbihxdWVzdGlvbjogUXVlc3Rpb24sIGFuc3dlck9wdGlvbnM/OiBBbnN3ZXJPcHRpb25bXSk6IFByb21pc2U8UXVlc3Rpb24gfCBudWxsPiB7XHJcbiAgICBjb25zdCBxdWVzdGlvbklkID0gYXdhaXQgdGhpcy5hZGRRdWVzdGlvbihxdWVzdGlvbiwgYW5zd2VyT3B0aW9ucyk7XHJcbiAgICBpZiAocXVlc3Rpb25JZCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnF1ZXN0aW9uLFxyXG4gICAgICAgIGlkOiBxdWVzdGlvbklkXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dWFsaXphIHVtYSBxdWVzdMOjbyBleGlzdGVudGVcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgdXBkYXRlUXVlc3Rpb24oaWQ6IG51bWJlciwgcXVlc3Rpb246IFF1ZXN0aW9uLCBhbnN3ZXJPcHRpb25zPzogQW5zd2VyT3B0aW9uW10pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEF0dWFsaXphIGEgcXVlc3TDo29cclxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgncXVlc3Rpb25zJylcclxuICAgICAgICAudXBkYXRlKHtcclxuICAgICAgICAgIC4uLnF1ZXN0aW9uLFxyXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZXEoJ2lkJywgaWQpO1xyXG5cclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNlIGhvdXZlciBvcMOnw7VlcyBkZSByZXNwb3N0YSBlIGZvciB1bWEgcXVlc3TDo28gZGUgbcO6bHRpcGxhIGVzY29saGEgb3UgVi9GXHJcbiAgICAgIGlmIChhbnN3ZXJPcHRpb25zICYmIGFuc3dlck9wdGlvbnMubGVuZ3RoID4gMCAmJiBcclxuICAgICAgICAgIChxdWVzdGlvbi5xdWVzdGlvbl90eXBlID09PSAnbXVsdGlwbGVfY2hvaWNlJyB8fCBxdWVzdGlvbi5xdWVzdGlvbl90eXBlID09PSAndHJ1ZV9mYWxzZScpKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gUHJpbWVpcm8sIGV4Y2x1aSBhcyBvcMOnw7VlcyBkZSByZXNwb3N0YSBleGlzdGVudGVzXHJcbiAgICAgICAgY29uc3QgeyBlcnJvcjogZGVsZXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAuZnJvbSgnYW5zd2VyX29wdGlvbnMnKVxyXG4gICAgICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgICAgICAuZXEoJ3F1ZXN0aW9uX2lkJywgaWQpO1xyXG5cclxuICAgICAgICBpZiAoZGVsZXRlRXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IGRlbGV0ZUVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRpY2lvbmEgbyBxdWVzdGlvbl9pZCDDoHMgb3DDp8O1ZXMgZGUgcmVzcG9zdGFcclxuICAgICAgICBjb25zdCBvcHRpb25zV2l0aFF1ZXN0aW9uSWQgPSBhbnN3ZXJPcHRpb25zLm1hcChvcHRpb24gPT4gKHtcclxuICAgICAgICAgIC4uLm9wdGlvbixcclxuICAgICAgICAgIHF1ZXN0aW9uX2lkOiBpZCxcclxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy8gSW5zZXJlIGFzIG5vdmFzIG9ww6fDtWVzIGRlIHJlc3Bvc3RhXHJcbiAgICAgICAgY29uc3QgeyBlcnJvcjogb3B0aW9uc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgICAgLmZyb20oJ2Fuc3dlcl9vcHRpb25zJylcclxuICAgICAgICAgIC5pbnNlcnQob3B0aW9uc1dpdGhRdWVzdGlvbklkKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnNFcnJvcikge1xyXG4gICAgICAgICAgdGhyb3cgb3B0aW9uc0Vycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvIGFvIGF0dWFsaXphciBxdWVzdMOjbyAke2lkfTpgLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4Y2x1aSB1bWEgcXVlc3TDo28gZSBzdWFzIG9ww6fDtWVzIGRlIHJlc3Bvc3RhXHJcbiAgICovXHJcbiAgc3RhdGljIGFzeW5jIGRlbGV0ZVF1ZXN0aW9uKGlkOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFByaW1laXJvLCBleGNsdWkgYXMgb3DDp8O1ZXMgZGUgcmVzcG9zdGEgYXNzb2NpYWRhc1xyXG4gICAgICBjb25zdCB7IGVycm9yOiBvcHRpb25zRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ2Fuc3dlcl9vcHRpb25zJylcclxuICAgICAgICAuZGVsZXRlKClcclxuICAgICAgICAuZXEoJ3F1ZXN0aW9uX2lkJywgaWQpO1xyXG5cclxuICAgICAgaWYgKG9wdGlvbnNFcnJvcikge1xyXG4gICAgICAgIHRocm93IG9wdGlvbnNFcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRW0gc2VndWlkYSwgZXhjbHVpIGEgcXVlc3TDo29cclxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgncXVlc3Rpb25zJylcclxuICAgICAgICAuZGVsZXRlKClcclxuICAgICAgICAuZXEoJ2lkJywgaWQpO1xyXG5cclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRXJybyBhbyBleGNsdWlyIHF1ZXN0w6NvICR7aWR9OmAsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQnVzY2EgcXVlc3TDtWVzIGNvbSBiYXNlIGVtIGZpbHRyb3NcclxuICAgKi9cclxuICBzdGF0aWMgYXN5bmMgZ2V0RmlsdGVyZWRRdWVzdGlvbnMoZmlsdGVyczoge1xyXG4gICAgZGlzY2lwbGluZUlkPzogbnVtYmVyO1xyXG4gICAgc3ViamVjdElkPzogbnVtYmVyO1xyXG4gICAgZGlmZmljdWx0eT86IHN0cmluZztcclxuICAgIHF1ZXN0aW9uVHlwZT86IHN0cmluZztcclxuICAgIHNlYXJjaFRlcm0/OiBzdHJpbmc7XHJcbiAgfSk6IFByb21pc2U8UXVlc3Rpb25bXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBkYXRhOiB1c2VyIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghdXNlciB8fCAhdXNlci51c2VyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc3XDoXJpbyBuw6NvIGF1dGVudGljYWRvJyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3F1ZXN0aW9ucycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci51c2VyLmlkKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEFwbGljYSBvcyBmaWx0cm9zXHJcbiAgICAgIGlmIChmaWx0ZXJzLmRpc2NpcGxpbmVJZCkge1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ2Rpc2NpcGxpbmVfaWQnLCBmaWx0ZXJzLmRpc2NpcGxpbmVJZCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChmaWx0ZXJzLnN1YmplY3RJZCkge1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ3N1YmplY3RfaWQnLCBmaWx0ZXJzLnN1YmplY3RJZCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChmaWx0ZXJzLmRpZmZpY3VsdHkpIHtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdkaWZmaWN1bHR5JywgZmlsdGVycy5kaWZmaWN1bHR5KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGZpbHRlcnMucXVlc3Rpb25UeXBlKSB7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5lcSgncXVlc3Rpb25fdHlwZScsIGZpbHRlcnMucXVlc3Rpb25UeXBlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGZpbHRlcnMuc2VhcmNoVGVybSkge1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuaWxpa2UoJ2NvbnRlbnQnLCBgJSR7ZmlsdGVycy5zZWFyY2hUZXJtfSVgKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgcXVlcnkub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XHJcblxyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGRhdGEgfHwgW107XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvIGFvIGZpbHRyYXIgcXVlc3TDtWVzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBWZXJpZmljYSBzZSBhcyB0YWJlbGFzIG5lY2Vzc8OhcmlhcyBleGlzdGVtIGUgY29udMOqbSBkYWRvc1xyXG4gICAqL1xyXG4gIHN0YXRpYyBhc3luYyBjaGVja1RhYmxlc0V4aXN0KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBjb3VudCwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3F1ZXN0aW9ucycpXHJcbiAgICAgICAgLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvIGFvIHZlcmlmaWNhciB0YWJlbGFzOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJybyBhbyB2ZXJpZmljYXIgZXN0cnV0dXJhIGRvIGJhbmNvIGRlIGRhZG9zOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBHZXJhIGRhZG9zIGRlIGV4ZW1wbG8gcGFyYSBvIGJhbmNvIGRlIHF1ZXN0w7Vlc1xyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRNb2NrUXVlc3Rpb25zKCk6IFF1ZXN0aW9uW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAxLFxyXG4gICAgICAgIGNvbnRlbnQ6ICdRdWFsIMOpIG8gdHJhdGFtZW50byBkZSBwcmltZWlyYSBsaW5oYSBwYXJhIGhpcGVydGVuc8OjbyBlbSBwYWNpZW50ZXMgY29tIGRpYWJldGVzPycsXHJcbiAgICAgICAgZXhwbGFuYXRpb246ICdPIHRyYXRhbWVudG8gZGUgcHJpbWVpcmEgbGluaGEgbWFpcyByZWNvbWVuZGFkbyDDqSB1bSBpbmliaWRvciBkYSBlbnppbWEgY29udmVyc29yYSBkZSBhbmdpb3RlbnNpbmEgKElFQ0EpIG91IGJsb3F1ZWFkb3IgZG8gcmVjZXB0b3IgZGEgYW5naW90ZW5zaW5hIChCUkEpIGRldmlkbyDDoCBwcm90ZcOnw6NvIHJlbmFsIGFkaWNpb25hbC4nLFxyXG4gICAgICAgIGRpc2NpcGxpbmVfaWQ6IDEsXHJcbiAgICAgICAgc3ViamVjdF9pZDogMyxcclxuICAgICAgICBkaWZmaWN1bHR5OiAnbcOpZGlhJyxcclxuICAgICAgICBxdWVzdGlvbl90eXBlOiAnbXVsdGlwbGVfY2hvaWNlJyxcclxuICAgICAgICB0YWdzOiBbJ2hpcGVydGVuc8OjbycsICdkaWFiZXRlcycsICd0cmF0YW1lbnRvJ10sXHJcbiAgICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDEtMTVUMTA6MzA6MDBaJyxcclxuICAgICAgICBhbnN3ZXJfb3B0aW9uczogW1xyXG4gICAgICAgICAgeyBpZDogMSwgcXVlc3Rpb25faWQ6IDEsIHRleHQ6ICdJRUNBIG91IEJSQScsIGlzX2NvcnJlY3Q6IHRydWUgfSxcclxuICAgICAgICAgIHsgaWQ6IDIsIHF1ZXN0aW9uX2lkOiAxLCB0ZXh0OiAnQmV0YS1ibG9xdWVhZG9yZXMnLCBpc19jb3JyZWN0OiBmYWxzZSB9LFxyXG4gICAgICAgICAgeyBpZDogMywgcXVlc3Rpb25faWQ6IDEsIHRleHQ6ICdCbG9xdWVhZG9yZXMgZGUgY2FuYWlzIGRlIGPDoWxjaW8nLCBpc19jb3JyZWN0OiBmYWxzZSB9LFxyXG4gICAgICAgICAgeyBpZDogNCwgcXVlc3Rpb25faWQ6IDEsIHRleHQ6ICdEaXVyw6l0aWNvcyB0aWF6w61kaWNvcycsIGlzX2NvcnJlY3Q6IGZhbHNlIH1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogMixcclxuICAgICAgICBjb250ZW50OiAnUGFjaWVudGVzIGNvbSBmaWJyaWxhw6fDo28gYXRyaWFsIGRldmVtIHNlbXByZSByZWNlYmVyIGFudGljb2FndWxhw6fDo28uJyxcclxuICAgICAgICBleHBsYW5hdGlvbjogJ0ZhbHNvLiBBIGRlY2lzw6NvIHNvYnJlIGFudGljb2FndWxhw6fDo28gZW0gcGFjaWVudGVzIGNvbSBmaWJyaWxhw6fDo28gYXRyaWFsIGRldmUgc2VyIGJhc2VhZGEgbmEgYXZhbGlhw6fDo28gZGUgcmlzY28gZGUgQVZDIChleC46IGVzY29yZSBDSEEyRFMyLVZBU2MpIGUgbm8gcmlzY28gZGUgc2FuZ3JhbWVudG8gKGV4LjogZXNjb3JlIEhBUy1CTEVEKS4nLFxyXG4gICAgICAgIGRpc2NpcGxpbmVfaWQ6IDEsXHJcbiAgICAgICAgc3ViamVjdF9pZDogNCxcclxuICAgICAgICBkaWZmaWN1bHR5OiAnYmFpeGEnLFxyXG4gICAgICAgIHF1ZXN0aW9uX3R5cGU6ICd0cnVlX2ZhbHNlJyxcclxuICAgICAgICBjb3JyZWN0X2Fuc3dlcjogJ2ZhbHNlJyxcclxuICAgICAgICB0YWdzOiBbJ2ZpYnJpbGHDp8OjbyBhdHJpYWwnLCAnYW50aWNvYWd1bGHDp8OjbycsICdjYXJkaW9sb2dpYSddLFxyXG4gICAgICAgIGNyZWF0ZWRfYXQ6ICcyMDI1LTAxLTIwVDE0OjQ1OjAwWidcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAzLFxyXG4gICAgICAgIGNvbnRlbnQ6ICdEZXNjcmV2YSBvcyBtZWNhbmlzbW9zIGZpc2lvcGF0b2zDs2dpY29zIGRhIGluc3VmaWNpw6puY2lhIGNhcmTDrWFjYSBjb20gZnJhw6fDo28gZGUgZWplw6fDo28gcHJlc2VydmFkYSAoSUNGRXApLicsXHJcbiAgICAgICAgZXhwbGFuYXRpb246ICdBIElDRkVwIMOpIGNhcmFjdGVyaXphZGEgcG9yIGRpc2Z1bsOnw6NvIGRpYXN0w7NsaWNhLCByaWdpZGV6IHZlbnRyaWN1bGFyLCBmaWJyb3NlIG1pb2PDoXJkaWNhLCBkaW1pbnVpw6fDo28gZGEgY29tcGxhY8OqbmNpYSB2ZW50cmljdWxhciwgZGlzZnVuw6fDo28gbWljcm92YXNjdWxhciBlIGluZmxhbWHDp8Ojby4gQSBkaXNmdW7Dp8OjbyBkaWFzdMOzbGljYSByZXN1bHRhIGVtIHByZXNzw7VlcyBkZSBlbmNoaW1lbnRvIGVsZXZhZGFzLCBjYXVzYW5kbyBzaW50b21hcyBkZSBjb25nZXN0w6NvIHB1bG1vbmFyIGUgZWRlbWEuJyxcclxuICAgICAgICBkaXNjaXBsaW5lX2lkOiAxLFxyXG4gICAgICAgIHN1YmplY3RfaWQ6IDUsXHJcbiAgICAgICAgZGlmZmljdWx0eTogJ2FsdGEnLFxyXG4gICAgICAgIHF1ZXN0aW9uX3R5cGU6ICdlc3NheScsXHJcbiAgICAgICAgdGFnczogWydpbnN1ZmljacOqbmNpYSBjYXJkw61hY2EnLCAnZmlzaW9wYXRvbG9naWEnLCAnZnJhw6fDo28gZGUgZWplw6fDo28gcHJlc2VydmFkYSddLFxyXG4gICAgICAgIGNyZWF0ZWRfYXQ6ICcyMDI1LTAxLTI1VDA5OjE1OjAwWidcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGlkOiA0LFxyXG4gICAgICAgIGNvbnRlbnQ6ICdRdWFsIGRvcyBzZWd1aW50ZXMgbsOjbyDDqSBjb25zaWRlcmFkbyB1bSBzaW5hbCBjbMOhc3NpY28gZGUgUGFya2luc29uaXNtbz8nLFxyXG4gICAgICAgIGV4cGxhbmF0aW9uOiAnT3Mgc2luYWlzIGNsw6Fzc2ljb3MgZG8gUGFya2luc29uaXNtbyBpbmNsdWVtIHRyZW1vciBkZSByZXBvdXNvLCByaWdpZGV6LCBicmFkaWNpbmVzaWEgZSBpbnN0YWJpbGlkYWRlIHBvc3R1cmFsLiBBIGNvcmVpYSAobW92aW1lbnRvcyBpbnZvbHVudMOhcmlvcywgcsOhcGlkb3MgZSBpcnJlZ3VsYXJlcykgw6kgY2FyYWN0ZXLDrXN0aWNhbWVudGUgYXNzb2NpYWRhIMOgIGRvZW7Dp2EgZGUgSHVudGluZ3RvbiwgbsOjbyBhbyBQYXJraW5zb25pc21vLicsXHJcbiAgICAgICAgZGlzY2lwbGluZV9pZDogMixcclxuICAgICAgICBzdWJqZWN0X2lkOiA4LFxyXG4gICAgICAgIGRpZmZpY3VsdHk6ICdtw6lkaWEnLFxyXG4gICAgICAgIHF1ZXN0aW9uX3R5cGU6ICdtdWx0aXBsZV9jaG9pY2UnLFxyXG4gICAgICAgIHRhZ3M6IFsnbmV1cm9sb2dpYScsICdwYXJraW5zb24nLCAnZGlhZ27Ds3N0aWNvJ10sXHJcbiAgICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDItMDVUMTE6MjA6MDBaJyxcclxuICAgICAgICBhbnN3ZXJfb3B0aW9uczogW1xyXG4gICAgICAgICAgeyBpZDogNSwgcXVlc3Rpb25faWQ6IDQsIHRleHQ6ICdUcmVtb3IgZGUgcmVwb3VzbycsIGlzX2NvcnJlY3Q6IGZhbHNlIH0sXHJcbiAgICAgICAgICB7IGlkOiA2LCBxdWVzdGlvbl9pZDogNCwgdGV4dDogJ1JpZ2lkZXonLCBpc19jb3JyZWN0OiBmYWxzZSB9LFxyXG4gICAgICAgICAgeyBpZDogNywgcXVlc3Rpb25faWQ6IDQsIHRleHQ6ICdDb3JlaWEnLCBpc19jb3JyZWN0OiB0cnVlIH0sXHJcbiAgICAgICAgICB7IGlkOiA4LCBxdWVzdGlvbl9pZDogNCwgdGV4dDogJ0JyYWRpY2luZXNpYScsIGlzX2NvcnJlY3Q6IGZhbHNlIH1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogNSxcclxuICAgICAgICBjb250ZW50OiAnQSBjZXRvYWNpZG9zZSBkaWFiw6l0aWNhIMOpIHVtYSBlbWVyZ8OqbmNpYSBtw6lkaWNhIHF1ZSBvY29ycmUgcHJlZG9taW5hbnRlbWVudGUgZW0gcGFjaWVudGVzIGNvbSBkaWFiZXRlcyB0aXBvIDIuJyxcclxuICAgICAgICBleHBsYW5hdGlvbjogJ0ZhbHNvLiBBIGNldG9hY2lkb3NlIGRpYWLDqXRpY2Egb2NvcnJlIHByZWRvbWluYW50ZW1lbnRlIGVtIHBhY2llbnRlcyBjb20gZGlhYmV0ZXMgdGlwbyAxLCBlbWJvcmEgcG9zc2Egb2NvcnJlciBlbSBkaWFiZXRlcyB0aXBvIDIgZW0gc2l0dWHDp8O1ZXMgZGUgZXN0cmVzc2UgZXh0cmVtbyAoY29tbyBpbmZlY8Onw7VlcyBncmF2ZXMsIHRyYXVtYSBvdSBjaXJ1cmdpYSkuJyxcclxuICAgICAgICBkaXNjaXBsaW5lX2lkOiAzLFxyXG4gICAgICAgIHN1YmplY3RfaWQ6IDEyLFxyXG4gICAgICAgIGRpZmZpY3VsdHk6ICdiYWl4YScsXHJcbiAgICAgICAgcXVlc3Rpb25fdHlwZTogJ3RydWVfZmFsc2UnLFxyXG4gICAgICAgIGNvcnJlY3RfYW5zd2VyOiAnZmFsc2UnLFxyXG4gICAgICAgIHRhZ3M6IFsnZGlhYmV0ZXMnLCAnZW1lcmfDqm5jaWEnLCAnY2V0b2FjaWRvc2UnXSxcclxuICAgICAgICBjcmVhdGVkX2F0OiAnMjAyNS0wMi0xMFQxNjowNTowMFonXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJzdXBhYmFzZSIsInRvYXN0IiwiUXVlc3Rpb25zQmFua1NlcnZpY2UiLCJnZXRVc2VyUXVlc3Rpb25zIiwiZGF0YSIsInVzZXIiLCJhdXRoIiwiZ2V0VXNlciIsIkVycm9yIiwiZXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJpZCIsIm9yZGVyIiwiYXNjZW5kaW5nIiwiY29uc29sZSIsImdldFF1ZXN0aW9uQnlJZCIsInNpbmdsZSIsInF1ZXN0aW9uX3R5cGUiLCJvcHRpb25zIiwiZ2V0QW5zd2VyT3B0aW9ucyIsImFuc3dlcl9vcHRpb25zIiwicXVlc3Rpb25JZCIsImFkZFF1ZXN0aW9uIiwicXVlc3Rpb24iLCJhbnN3ZXJPcHRpb25zIiwibmV3UXVlc3Rpb24iLCJ1c2VyX2lkIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInVwZGF0ZWRfYXQiLCJpbnNlcnQiLCJsZW5ndGgiLCJvcHRpb25zV2l0aFF1ZXN0aW9uSWQiLCJtYXAiLCJvcHRpb24iLCJvcHRpb25XaXRob3V0SWQiLCJxdWVzdGlvbl9pZCIsIm9wdGlvbnNFcnJvciIsIm1lc3NhZ2UiLCJjcmVhdGVRdWVzdGlvbiIsInVwZGF0ZVF1ZXN0aW9uIiwidXBkYXRlIiwiZGVsZXRlRXJyb3IiLCJkZWxldGUiLCJkZWxldGVRdWVzdGlvbiIsImdldEZpbHRlcmVkUXVlc3Rpb25zIiwiZmlsdGVycyIsInF1ZXJ5IiwiZGlzY2lwbGluZUlkIiwic3ViamVjdElkIiwiZGlmZmljdWx0eSIsInF1ZXN0aW9uVHlwZSIsInNlYXJjaFRlcm0iLCJpbGlrZSIsImNoZWNrVGFibGVzRXhpc3QiLCJjb3VudCIsImhlYWQiLCJnZXRNb2NrUXVlc3Rpb25zIiwiY29udGVudCIsImV4cGxhbmF0aW9uIiwiZGlzY2lwbGluZV9pZCIsInN1YmplY3RfaWQiLCJ0YWdzIiwidGV4dCIsImlzX2NvcnJlY3QiLCJjb3JyZWN0X2Fuc3dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/questions-bank.service.ts\n"));

/***/ })

});