"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/banco-questoes/page",{

/***/ "(app-pages-browser)/./src/services/questions-bank.service.ts":
/*!************************************************!*\
  !*** ./src/services/questions-bank.service.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuestionsBankService: function() { return /* binding */ QuestionsBankService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n\n\nclass QuestionsBankService {\n    /**\r\n   * Busca todas as questões do usuário atual\r\n   */ static async getUserQuestions() {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"user_id\", user.user.id).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xf5es:\", error);\n            return [];\n        }\n    }\n    /**\r\n   * Busca uma questão específica pelo ID\r\n   */ static async getQuestionById(id) {\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                throw error;\n            }\n            // Carregar as opções de resposta se for uma questão de múltipla escolha ou V/F\n            if (data && (data.question_type === \"multiple_choice\" || data.question_type === \"true_false\")) {\n                const options = await this.getAnswerOptions(data.id);\n                data.answer_options = options;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Erro ao buscar quest\\xe3o \".concat(id, \":\"), error);\n            return null;\n        }\n    }\n    /**\r\n   * Busca as opções de resposta para uma questão específica\r\n   */ static async getAnswerOptions(questionId) {\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").select(\"*\").eq(\"question_id\", questionId).order(\"id\");\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao buscar op\\xe7\\xf5es de resposta para quest\\xe3o \".concat(questionId, \":\"), error);\n            return [];\n        }\n    }\n    /**\r\n   * Adiciona uma nova questão\r\n   */ static async addQuestion(question, answerOptions) {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            // Adiciona o user_id à questão\n            const newQuestion = {\n                ...question,\n                user_id: user.user.id,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            // Insere a questão\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").insert([\n                newQuestion\n            ]).select(\"id\").single();\n            if (error) {\n                throw error;\n            }\n            const questionId = data.id;\n            // Se houver opções de resposta e for uma questão de múltipla escolha ou V/F\n            if (answerOptions && answerOptions.length > 0 && (question.question_type === \"multiple_choice\" || question.question_type === \"true_false\")) {\n                // Adiciona o question_id às opções de resposta e remove os IDs temporários\n                const optionsWithQuestionId = answerOptions.map((option)=>{\n                    // Remove o campo id para que o Supabase gere um novo ID\n                    const { id, ...optionWithoutId } = option;\n                    return {\n                        ...optionWithoutId,\n                        question_id: questionId,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    };\n                });\n                // Insere as opções de resposta\n                const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").insert(optionsWithQuestionId);\n                if (optionsError) {\n                    console.error(\"Erro ao inserir op\\xe7\\xf5es de resposta:\", optionsError);\n                    throw optionsError;\n                }\n            }\n            return questionId;\n        } catch (error) {\n            console.error(\"Erro ao adicionar quest\\xe3o:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Erro ao adicionar quest\\xe3o: \" + error.message);\n            return null;\n        }\n    }\n    /**\r\n   * Alias para addQuestion, para compatibilidade com a interface\r\n   */ static async createQuestion(question, answerOptions) {\n        const questionId = await this.addQuestion(question, answerOptions);\n        if (questionId) {\n            return {\n                ...question,\n                id: questionId\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Atualiza uma questão existente\r\n   */ static async updateQuestion(id, question, answerOptions) {\n        try {\n            // Atualiza a questão\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").update({\n                ...question,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", id);\n            if (error) {\n                throw error;\n            }\n            // Se houver opções de resposta e for uma questão de múltipla escolha ou V/F\n            if (answerOptions && answerOptions.length > 0 && (question.question_type === \"multiple_choice\" || question.question_type === \"true_false\")) {\n                // Primeiro, exclui as opções de resposta existentes\n                const { error: deleteError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").delete().eq(\"question_id\", id);\n                if (deleteError) {\n                    throw deleteError;\n                }\n                // Adiciona o question_id às opções de resposta e remove os IDs temporários\n                const optionsWithQuestionId = answerOptions.map((option)=>{\n                    // Remove o campo id para que o Supabase gere um novo ID\n                    const { id: optionId, ...optionWithoutId } = option;\n                    return {\n                        ...optionWithoutId,\n                        question_id: id,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    };\n                });\n                // Insere as novas opções de resposta\n                const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").insert(optionsWithQuestionId);\n                if (optionsError) {\n                    console.error(\"Erro ao inserir op\\xe7\\xf5es de resposta:\", optionsError);\n                    throw optionsError;\n                }\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao atualizar quest\\xe3o \".concat(id, \":\"), error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Erro ao atualizar quest\\xe3o: \" + error.message);\n            return false;\n        }\n    }\n    /**\r\n   * Exclui uma questão e suas opções de resposta\r\n   */ static async deleteQuestion(id) {\n        try {\n            // Primeiro, exclui as opções de resposta associadas\n            const { error: optionsError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"answer_options\").delete().eq(\"question_id\", id);\n            if (optionsError) {\n                throw optionsError;\n            }\n            // Em seguida, exclui a questão\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").delete().eq(\"id\", id);\n            if (error) {\n                throw error;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao excluir quest\\xe3o \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n    /**\r\n   * Busca questões com base em filtros\r\n   */ static async getFilteredQuestions(filters) {\n        try {\n            const { data: user } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            if (!user || !user.user) {\n                throw new Error(\"Usu\\xe1rio n\\xe3o autenticado\");\n            }\n            let query = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\").eq(\"user_id\", user.user.id);\n            // Aplica os filtros\n            if (filters.disciplineId) {\n                query = query.eq(\"discipline_id\", filters.disciplineId);\n            }\n            if (filters.subjectId) {\n                query = query.eq(\"subject_id\", filters.subjectId);\n            }\n            if (filters.difficulty) {\n                query = query.eq(\"difficulty\", filters.difficulty);\n            }\n            if (filters.questionType) {\n                query = query.eq(\"question_type\", filters.questionType);\n            }\n            if (filters.searchTerm) {\n                query = query.ilike(\"content\", \"%\".concat(filters.searchTerm, \"%\"));\n            }\n            const { data, error } = await query.order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                throw error;\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Erro ao filtrar quest\\xf5es:\", error);\n            return [];\n        }\n    }\n    /**\r\n   * Verifica se as tabelas necessárias existem e contêm dados\r\n   */ static async checkTablesExist() {\n        try {\n            const { count, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"questions\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            });\n            if (error) {\n                console.error(\"Erro ao verificar tabelas:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erro ao verificar estrutura do banco de dados:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Gera dados de exemplo para o banco de questões\r\n   */ static getMockQuestions() {\n        return [\n            {\n                id: 1,\n                content: \"Qual \\xe9 o tratamento de primeira linha para hipertens\\xe3o em pacientes com diabetes?\",\n                explanation: \"O tratamento de primeira linha mais recomendado \\xe9 um inibidor da enzima conversora de angiotensina (IECA) ou bloqueador do receptor da angiotensina (BRA) devido \\xe0 prote\\xe7\\xe3o renal adicional.\",\n                discipline_id: 1,\n                subject_id: 3,\n                difficulty: \"m\\xe9dia\",\n                question_type: \"multiple_choice\",\n                tags: [\n                    \"hipertens\\xe3o\",\n                    \"diabetes\",\n                    \"tratamento\"\n                ],\n                created_at: \"2025-01-15T10:30:00Z\",\n                answer_options: [\n                    {\n                        id: 1,\n                        question_id: 1,\n                        text: \"IECA ou BRA\",\n                        is_correct: true\n                    },\n                    {\n                        id: 2,\n                        question_id: 1,\n                        text: \"Beta-bloqueadores\",\n                        is_correct: false\n                    },\n                    {\n                        id: 3,\n                        question_id: 1,\n                        text: \"Bloqueadores de canais de c\\xe1lcio\",\n                        is_correct: false\n                    },\n                    {\n                        id: 4,\n                        question_id: 1,\n                        text: \"Diur\\xe9ticos tiaz\\xeddicos\",\n                        is_correct: false\n                    }\n                ]\n            },\n            {\n                id: 2,\n                content: \"Pacientes com fibrila\\xe7\\xe3o atrial devem sempre receber anticoagula\\xe7\\xe3o.\",\n                explanation: \"Falso. A decis\\xe3o sobre anticoagula\\xe7\\xe3o em pacientes com fibrila\\xe7\\xe3o atrial deve ser baseada na avalia\\xe7\\xe3o de risco de AVC (ex.: escore CHA2DS2-VASc) e no risco de sangramento (ex.: escore HAS-BLED).\",\n                discipline_id: 1,\n                subject_id: 4,\n                difficulty: \"baixa\",\n                question_type: \"true_false\",\n                correct_answer: \"false\",\n                tags: [\n                    \"fibrila\\xe7\\xe3o atrial\",\n                    \"anticoagula\\xe7\\xe3o\",\n                    \"cardiologia\"\n                ],\n                created_at: \"2025-01-20T14:45:00Z\"\n            },\n            {\n                id: 3,\n                content: \"Descreva os mecanismos fisiopatol\\xf3gicos da insufici\\xeancia card\\xedaca com fra\\xe7\\xe3o de eje\\xe7\\xe3o preservada (ICFEp).\",\n                explanation: \"A ICFEp \\xe9 caracterizada por disfun\\xe7\\xe3o diast\\xf3lica, rigidez ventricular, fibrose mioc\\xe1rdica, diminui\\xe7\\xe3o da complac\\xeancia ventricular, disfun\\xe7\\xe3o microvascular e inflama\\xe7\\xe3o. A disfun\\xe7\\xe3o diast\\xf3lica resulta em press\\xf5es de enchimento elevadas, causando sintomas de congest\\xe3o pulmonar e edema.\",\n                discipline_id: 1,\n                subject_id: 5,\n                difficulty: \"alta\",\n                question_type: \"essay\",\n                tags: [\n                    \"insufici\\xeancia card\\xedaca\",\n                    \"fisiopatologia\",\n                    \"fra\\xe7\\xe3o de eje\\xe7\\xe3o preservada\"\n                ],\n                created_at: \"2025-01-25T09:15:00Z\"\n            },\n            {\n                id: 4,\n                content: \"Qual dos seguintes n\\xe3o \\xe9 considerado um sinal cl\\xe1ssico de Parkinsonismo?\",\n                explanation: \"Os sinais cl\\xe1ssicos do Parkinsonismo incluem tremor de repouso, rigidez, bradicinesia e instabilidade postural. A coreia (movimentos involunt\\xe1rios, r\\xe1pidos e irregulares) \\xe9 caracter\\xedsticamente associada \\xe0 doen\\xe7a de Huntington, n\\xe3o ao Parkinsonismo.\",\n                discipline_id: 2,\n                subject_id: 8,\n                difficulty: \"m\\xe9dia\",\n                question_type: \"multiple_choice\",\n                tags: [\n                    \"neurologia\",\n                    \"parkinson\",\n                    \"diagn\\xf3stico\"\n                ],\n                created_at: \"2025-02-05T11:20:00Z\",\n                answer_options: [\n                    {\n                        id: 5,\n                        question_id: 4,\n                        text: \"Tremor de repouso\",\n                        is_correct: false\n                    },\n                    {\n                        id: 6,\n                        question_id: 4,\n                        text: \"Rigidez\",\n                        is_correct: false\n                    },\n                    {\n                        id: 7,\n                        question_id: 4,\n                        text: \"Coreia\",\n                        is_correct: true\n                    },\n                    {\n                        id: 8,\n                        question_id: 4,\n                        text: \"Bradicinesia\",\n                        is_correct: false\n                    }\n                ]\n            },\n            {\n                id: 5,\n                content: \"A cetoacidose diab\\xe9tica \\xe9 uma emerg\\xeancia m\\xe9dica que ocorre predominantemente em pacientes com diabetes tipo 2.\",\n                explanation: \"Falso. A cetoacidose diab\\xe9tica ocorre predominantemente em pacientes com diabetes tipo 1, embora possa ocorrer em diabetes tipo 2 em situa\\xe7\\xf5es de estresse extremo (como infec\\xe7\\xf5es graves, trauma ou cirurgia).\",\n                discipline_id: 3,\n                subject_id: 12,\n                difficulty: \"baixa\",\n                question_type: \"true_false\",\n                correct_answer: \"false\",\n                tags: [\n                    \"diabetes\",\n                    \"emerg\\xeancia\",\n                    \"cetoacidose\"\n                ],\n                created_at: \"2025-02-10T16:05:00Z\"\n            }\n        ];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/questions-bank.service.ts\n"));

/***/ })

});