-- Tabela de Salas de Estudo
CREATE TABLE IF NOT EXISTS study_rooms (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  capacity INTEGER,
  active_users INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabela de usuários nas salas de estudo
CREATE TABLE IF NOT EXISTS study_room_users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  room_id UUID NOT NULL REFERENCES study_rooms(id) ON DELETE CASCADE,
  username TEXT NOT NULL,
  avatar_url TEXT,
  entrou_em TIMESTAMP WITH TIME ZONE NOT NULL,
  esta_online BOOLEAN DEFAULT TRUE,
  tempo_total INTEGER DEFAULT 0, -- tempo em segundos
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE (user_id, room_id)
);

-- Índices para otimizar consultas
CREATE INDEX IF NOT EXISTS idx_study_room_users_room_id ON study_room_users(room_id);
CREATE INDEX IF NOT EXISTS idx_study_room_users_user_id ON study_room_users(user_id);
CREATE INDEX IF NOT EXISTS idx_study_room_users_online ON study_room_users(esta_online);

-- Função para atualizar o contador de usuários ativos
CREATE OR REPLACE FUNCTION update_active_users_count()
RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT' AND NEW.esta_online = TRUE) OR
     (TG_OP = 'UPDATE' AND NEW.esta_online = TRUE AND OLD.esta_online = FALSE) THEN
    -- Incrementar contador
    UPDATE study_rooms
    SET active_users = active_users + 1,
        updated_at = NOW()
    WHERE id = NEW.room_id;
  ELSIF (TG_OP = 'DELETE' AND OLD.esta_online = TRUE) OR
        (TG_OP = 'UPDATE' AND NEW.esta_online = FALSE AND OLD.esta_online = TRUE) THEN
    -- Decrementar contador
    UPDATE study_rooms
    SET active_users = GREATEST(0, active_users - 1),
        updated_at = NOW()
    WHERE id = OLD.room_id;
  END IF;
  
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Trigger para atualizar o contador quando um usuário entra ou sai
DROP TRIGGER IF EXISTS trg_update_active_users ON study_room_users;
CREATE TRIGGER trg_update_active_users
AFTER INSERT OR UPDATE OR DELETE ON study_room_users
FOR EACH ROW
EXECUTE FUNCTION update_active_users_count();

-- RLS (Row Level Security)
ALTER TABLE study_rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE study_room_users ENABLE ROW LEVEL SECURITY;

-- Políticas para study_rooms
CREATE POLICY "Qualquer pessoa pode visualizar salas" ON study_rooms
  FOR SELECT USING (true);

-- Políticas para study_room_users
CREATE POLICY "Usuários autenticados podem ver quem está online" ON study_room_users
  FOR SELECT USING (auth.role() = 'authenticated');
  
CREATE POLICY "Usuários podem gerenciar seus próprios registros" ON study_room_users
  FOR ALL USING (auth.uid() = user_id);

-- Inserir algumas salas iniciais para teste
INSERT INTO study_rooms (name, description, capacity)
VALUES 
  ('Sala de Medicina Geral', 'Espaço para estudantes de medicina concentrarem seus estudos', 20),
  ('Sala de Especialidades', 'Para residentes e especialistas compartilharem conhecimento', 15),
  ('Sala de Concursos', 'Focada na preparação para provas de residência médica', 30)
ON CONFLICT (id) DO NOTHING; 