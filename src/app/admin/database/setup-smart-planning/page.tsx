"use client";

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { supabase } from "@/lib/supabase";
import { toast } from "react-hot-toast";
import { Code } from 'lucide-react';

// Exportar uma configuração de geração estática para evitar pré-renderização durante o build
export const dynamic = 'force-dynamic';
export const runtime = 'edge';

export default function SetupSmartPlanningPage() {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const createSmartPlanningTables = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Verificar se a função execute_sql existe
      const { data: functionExists, error: checkError } = await supabase
        .from('pg_proc')
        .select('proname')
        .eq('proname', 'execute_sql')
        .limit(1);
      
      if (checkError) {
        throw new Error("Erro ao verificar função: " + checkError.message);
      }
      
      if (!functionExists || functionExists.length === 0) {
        throw new Error("A função execute_sql não existe. Por favor, configure-a primeiro ou use o script SQL manualmente.");
      }
      
      // Execute o SQL para criar as tabelas usando a função execute_sql
      const { data, error: execError } = await supabase.rpc('execute_sql', {
        sql_query: `
          -- Tabela para os planos de estudo inteligente
        CREATE TABLE IF NOT EXISTS smart_plans (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name TEXT NOT NULL,
          user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            start_date DATE NOT NULL,
            end_date DATE NOT NULL,
            status TEXT NOT NULL DEFAULT 'draft',
          settings JSONB NOT NULL DEFAULT '{}',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
          );

          -- Tabela para as sessões de estudo dos planos
        CREATE TABLE IF NOT EXISTS smart_plan_sessions (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          plan_id BIGINT NOT NULL REFERENCES smart_plans(id) ON DELETE CASCADE,
          title TEXT NOT NULL,
            discipline_id BIGINT REFERENCES disciplines(id) ON DELETE SET NULL,
            subject_id BIGINT REFERENCES subjects(id) ON DELETE SET NULL,
          date DATE NOT NULL,
          start_time TIME NOT NULL,
          end_time TIME NOT NULL,
          duration_minutes INTEGER NOT NULL,
            is_revision BOOLEAN DEFAULT FALSE,
            original_session_id BIGINT REFERENCES smart_plan_sessions(id) ON DELETE SET NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
          );

          -- Políticas RLS para smart_plans
          CREATE POLICY "Usuários podem ver seus planos" ON smart_plans
            FOR SELECT USING (auth.uid() = user_id);
          
          CREATE POLICY "Usuários podem criar seus planos" ON smart_plans
            FOR INSERT WITH CHECK (auth.uid() = user_id);
          
          CREATE POLICY "Usuários podem atualizar seus planos" ON smart_plans
            FOR UPDATE USING (auth.uid() = user_id);
          
          CREATE POLICY "Usuários podem excluir seus planos" ON smart_plans
            FOR DELETE USING (auth.uid() = user_id);

          -- Políticas RLS para smart_plan_sessions
          CREATE POLICY "Usuários podem ver suas sessões de plano" ON smart_plan_sessions
            FOR SELECT USING (EXISTS (
              SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
            ));
          
          CREATE POLICY "Usuários podem criar suas sessões de plano" ON smart_plan_sessions
            FOR INSERT WITH CHECK (EXISTS (
              SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
            ));
          
          CREATE POLICY "Usuários podem atualizar suas sessões de plano" ON smart_plan_sessions
            FOR UPDATE USING (EXISTS (
              SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
            ));
          
          CREATE POLICY "Usuários podem excluir suas sessões de plano" ON smart_plan_sessions
            FOR DELETE USING (EXISTS (
              SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
            ));

          -- Ativar RLS nas tabelas
          ALTER TABLE smart_plans ENABLE ROW LEVEL SECURITY;
          ALTER TABLE smart_plan_sessions ENABLE ROW LEVEL SECURITY;

          -- Criar índices para melhor performance
          CREATE INDEX IF NOT EXISTS idx_smart_plans_user_id ON smart_plans(user_id);
          CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_plan_id ON smart_plan_sessions(plan_id);
          CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_date ON smart_plan_sessions(date);
        `
      });
      
      if (execError) {
        throw new Error("Erro ao executar SQL: " + execError.message);
      }
      
      setSuccess(true);
      toast.success("Tabelas de planejamento inteligente criadas com sucesso!");
    } catch (err: any) {
      console.error("Erro ao criar tabelas:", err);
      setError(err.message);
      toast.error("Erro ao criar tabelas: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    const sqlScript = `
-- Tabela para os planos de estudo inteligente
CREATE TABLE IF NOT EXISTS smart_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'draft',
  settings JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Tabela para as sessões de estudo dos planos
CREATE TABLE IF NOT EXISTS smart_plan_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  plan_id BIGINT NOT NULL REFERENCES smart_plans(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  discipline_id BIGINT REFERENCES disciplines(id) ON DELETE SET NULL,
  subject_id BIGINT REFERENCES subjects(id) ON DELETE SET NULL,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  duration_minutes INTEGER NOT NULL,
  is_revision BOOLEAN DEFAULT FALSE,
  original_session_id BIGINT REFERENCES smart_plan_sessions(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Políticas RLS para smart_plans
CREATE POLICY "Usuários podem ver seus planos" ON smart_plans
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem criar seus planos" ON smart_plans
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usuários podem atualizar seus planos" ON smart_plans
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem excluir seus planos" ON smart_plans
  FOR DELETE USING (auth.uid() = user_id);

-- Políticas RLS para smart_plan_sessions
CREATE POLICY "Usuários podem ver suas sessões de plano" ON smart_plan_sessions
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem criar suas sessões de plano" ON smart_plan_sessions
  FOR INSERT WITH CHECK (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem atualizar suas sessões de plano" ON smart_plan_sessions
  FOR UPDATE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem excluir suas sessões de plano" ON smart_plan_sessions
  FOR DELETE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

-- Ativar RLS nas tabelas
ALTER TABLE smart_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE smart_plan_sessions ENABLE ROW LEVEL SECURITY;

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_smart_plans_user_id ON smart_plans(user_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_plan_id ON smart_plan_sessions(plan_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_date ON smart_plan_sessions(date);
`;

    navigator.clipboard.writeText(sqlScript).then(() => {
      toast.success("Script SQL copiado para a área de transferência!");
    }).catch(err => {
      toast.error("Erro ao copiar: " + err.message);
    });
  };

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Setup das Tabelas do Planejamento Inteligente</h1>
      
      <div className="p-6 bg-white rounded-xl shadow-md mb-6">
        <h2 className="text-xl font-semibold mb-4">Método Automatizado (requer função execute_sql)</h2>
        <p className="mb-4 text-gray-700">
          Este processo criará as tabelas necessárias para o funcionamento do módulo de planejamento inteligente utilizando a função <code>execute_sql</code>.
        </p>
        
        <Button 
          onClick={createSmartPlanningTables}
          disabled={loading}
          className="mb-4"
        >
          {loading ? "Criando tabelas..." : "Criar Tabelas"}
        </Button>
        
        {success && (
          <div className="p-4 bg-green-100 text-green-800 rounded-md mb-4">
            Tabelas criadas com sucesso!
          </div>
        )}
        
        {error && (
          <div className="p-4 bg-red-100 text-red-800 rounded-md mb-4">
            <p className="font-semibold">Erro:</p>
            <p>{error}</p>
          </div>
        )}
      </div>

      <div className="p-6 bg-white rounded-xl shadow-md">
        <h2 className="text-xl font-semibold mb-4">Método Manual (SQL)</h2>
        <p className="mb-4 text-gray-700">
          Se o método automatizado não funcionar, você pode copiar o script SQL abaixo e executá-lo diretamente no SQL Editor do Supabase.
        </p>
        
        <Button 
          onClick={copyToClipboard} 
          className="mb-4 flex items-center"
          variant="outline"
        >
          <Code className="h-4 w-4 mr-2" />
          Copiar Script SQL
        </Button>
        
        <div className="bg-gray-900 text-gray-100 p-4 rounded-md overflow-auto max-h-96">
          <pre className="text-sm">
{`-- Tabela para os planos de estudo inteligente
CREATE TABLE IF NOT EXISTS smart_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'draft',
  settings JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Tabela para as sessões de estudo dos planos
CREATE TABLE IF NOT EXISTS smart_plan_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  plan_id BIGINT NOT NULL REFERENCES smart_plans(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  discipline_id BIGINT REFERENCES disciplines(id) ON DELETE SET NULL,
  subject_id BIGINT REFERENCES subjects(id) ON DELETE SET NULL,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  duration_minutes INTEGER NOT NULL,
  is_revision BOOLEAN DEFAULT FALSE,
  original_session_id BIGINT REFERENCES smart_plan_sessions(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Políticas RLS para smart_plans
CREATE POLICY "Usuários podem ver seus planos" ON smart_plans
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem criar seus planos" ON smart_plans
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usuários podem atualizar seus planos" ON smart_plans
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem excluir seus planos" ON smart_plans
  FOR DELETE USING (auth.uid() = user_id);

-- Políticas RLS para smart_plan_sessions
CREATE POLICY "Usuários podem ver suas sessões de plano" ON smart_plan_sessions
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem criar suas sessões de plano" ON smart_plan_sessions
  FOR INSERT WITH CHECK (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem atualizar suas sessões de plano" ON smart_plan_sessions
  FOR UPDATE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem excluir suas sessões de plano" ON smart_plan_sessions
  FOR DELETE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

-- Ativar RLS nas tabelas
ALTER TABLE smart_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE smart_plan_sessions ENABLE ROW LEVEL SECURITY;

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_smart_plans_user_id ON smart_plans(user_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_plan_id ON smart_plan_sessions(plan_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_date ON smart_plan_sessions(date);`}
                    </pre>
                </div>
        
        <div className="mt-4 p-4 bg-blue-100 text-blue-800 rounded-md">
          <p className="font-semibold">Instruções:</p>
          <ol className="list-decimal ml-5 mt-2 space-y-1">
            <li>Copie o script acima</li>
            <li>Acesse o Dashboard do Supabase</li>
            <li>Navegue até "SQL Editor"</li>
            <li>Cole o script em uma nova consulta</li>
            <li>Execute o script clicando em "RUN"</li>
          </ol>
          </div>
        </div>
    </div>
  );
} 
