import { getAccessToken } from '@/lib/auth-utils';

export interface AIFlashcardParams {
  theme?: string;
  text?: string;
  pdfContent?: string;
  deckName: string;
  numberOfCards?: number;
  difficulty?: 'easy' | 'medium' | 'hard';
  language?: string;
}

export interface AIGeneratedFlashcard {
  front: string;
  back: string;
  hint?: string;
  tags?: string[];
  difficulty: 'easy' | 'medium' | 'hard';
}

export interface AIFlashcardResponse {
  deckName: string;
  description: string;
  flashcards: AIGeneratedFlashcard[];
}

export class AIFlashcardGeneratorService {
  // Chama a rota interna protegida do Groq com retry autom√°tico
  private static async callGroqAPI(prompt: string, retryCount = 0): Promise<string> {
    const maxRetries = 2;
    
    try {
      console.log('üöÄ AIFlashcardGeneratorService: Iniciando chamada para API Groq...');
      
      // Obter token de acesso para autentica√ß√£o
      const accessToken = await getAccessToken();
      
      console.log('üîë AIFlashcardGeneratorService: Token obtido:', accessToken ? 'SIM' : 'N√ÉO');
      
      if (!accessToken) {
        console.error('‚ùå AIFlashcardGeneratorService: Token de acesso n√£o dispon√≠vel');
        throw new Error('Voc√™ precisa estar logado para gerar flashcards com IA');
      }

      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`,
      };

      console.log('üì° AIFlashcardGeneratorService: Fazendo requisi√ß√£o para /api/groq/flashcards');

      const response = await fetch('/api/groq/flashcards', {
        method: 'POST',
        headers,
        credentials: 'include', // Importante para enviar cookies de sess√£o
        body: JSON.stringify({ prompt }),
      });
      
      console.log('üì• AIFlashcardGeneratorService: Resposta recebida, status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Erro desconhecido' }));
        
        console.error('‚ùå AIFlashcardGeneratorService: Erro na resposta:', {
          status: response.status,
          errorData
        });
        
        // Se for timeout (504) e ainda temos tentativas, retry automaticamente
        if (response.status === 504 && retryCount < maxRetries) {
          console.log(`Timeout na tentativa ${retryCount + 1}, tentando novamente...`);
          await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1 segundo
          return this.callGroqAPI(prompt, retryCount + 1);
        }
        
        // Tratar erros espec√≠ficos de permiss√£o e limite
        if (response.status === 401) {
          throw new Error('Voc√™ precisa estar logado para gerar flashcards com IA.');
        }
        
        if (response.status === 403) {
          if (errorData.requiresUpgrade) {
            throw new Error('A gera√ß√£o de flashcards por IA √© exclusiva para usu√°rios Pro e Pro+. Fa√ßa upgrade do seu plano para acessar este recurso.');
          }
          throw new Error('Voc√™ n√£o tem permiss√£o para acessar este recurso.');
        }
        
        if (response.status === 429) {
          if (errorData.limitReached) {
            throw new Error('Voc√™ atingiu o limite di√°rio de flashcards. Tente novamente amanh√£ ou fa√ßa upgrade para o plano Pro+ para flashcards ilimitados.');
          }
          throw new Error('Muitas requisi√ß√µes. Tente novamente em alguns minutos.');
        }
        
        if (response.status === 504) {
          throw new Error('A requisi√ß√£o demorou demais para ser processada. Tente novamente.');
        }
        
        throw new Error(errorData.error || `Erro na API: ${response.status}`);
      }
      
      const data = await response.json();
      return data.result;
    } catch (error: any) {
      // Se for erro de rede/timeout e ainda temos tentativas, retry automaticamente
      if ((error.name === 'TypeError' || error.message?.includes('fetch')) && retryCount < maxRetries) {
        console.log(`Erro de rede na tentativa ${retryCount + 1}, tentando novamente...`);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1 segundo
        return this.callGroqAPI(prompt, retryCount + 1);
      }
      
      console.error('Erro ao chamar a API Groq para flashcards:', error);
      throw error;
    }
  }

  // Gerar flashcards a partir de um tema
  static async generateFromTheme(params: AIFlashcardParams): Promise<AIFlashcardResponse> {
    if (!params.theme) {
      throw new Error('Tema √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 10;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais. Sua tarefa √© criar flashcards de alta qualidade sobre o tema: "${params.theme}".

INSTRU√á√ïES ESPEC√çFICAS:
- Crie exatamente ${numberOfCards} flashcards
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- Foque nos conceitos mais importantes e fundamentais do tema
- Cada flashcard deve ter uma pergunta clara na frente e uma resposta completa no verso
- Inclua dicas quando apropriado
- Adicione tags relevantes para categoriza√ß√£o

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome do deck baseado no tema",
  "description": "Descri√ß√£o breve do deck",
  "flashcards": [
    {
      "front": "Pergunta ou conceito a ser testado",
      "back": "Resposta completa e explicativa",
      "hint": "Dica opcional para ajudar na resposta",
      "tags": ["tag1", "tag2", "tag3"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS IMPORTANTES:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Certifique-se de que todas as perguntas sejam claras e espec√≠ficas
3. As respostas devem ser completas mas concisas
4. Use linguagem apropriada para o n√≠vel de dificuldade especificado
5. Varie os tipos de perguntas (defini√ß√µes, aplica√ß√µes, compara√ß√µes, etc.)
6. Inclua pelo menos 3 tags relevantes por flashcard

Tema: ${params.theme}
`;

    try {
      const response = await this.callGroqAPI(prompt);
      const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
      
      // Validar a resposta
      if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
        throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
      }

      return parsedResponse;
    } catch (error: any) {
      if (error.message?.includes('JSON')) {
        throw new Error('Erro ao processar resposta da IA. Tente novamente.');
      }
      throw error;
    }
  }

  // Gerar flashcards a partir de texto
  static async generateFromText(params: AIFlashcardParams): Promise<AIFlashcardResponse> {
    if (!params.text) {
      throw new Error('Texto √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 10;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais. Sua tarefa √© analisar o texto fornecido e criar flashcards de alta qualidade baseados no conte√∫do.

TEXTO PARA AN√ÅLISE:
"${params.text}"

INSTRU√á√ïES ESPEC√çFICAS:
- Crie exatamente ${numberOfCards} flashcards baseados no texto fornecido
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- Extraia os conceitos mais importantes do texto
- Cada flashcard deve testar a compreens√£o do conte√∫do
- Inclua dicas quando apropriado
- Adicione tags relevantes baseadas no conte√∫do

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome do deck baseado no conte√∫do do texto",
  "description": "Descri√ß√£o breve do deck baseada no texto",
  "flashcards": [
    {
      "front": "Pergunta baseada no texto",
      "back": "Resposta extra√≠da ou inferida do texto",
      "hint": "Dica opcional relacionada ao conte√∫do",
      "tags": ["tag1", "tag2", "tag3"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS IMPORTANTES:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Base todas as perguntas e respostas no texto fornecido
3. N√£o invente informa√ß√µes que n√£o estejam no texto
4. Varie os tipos de perguntas (defini√ß√µes, rela√ß√µes, aplica√ß√µes, etc.)
5. Use cita√ß√µes diretas quando apropriado
6. Inclua pelo menos 3 tags relevantes por flashcard baseadas no conte√∫do
`;

    try {
      const response = await this.callGroqAPI(prompt);
      const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
      
      // Validar a resposta
      if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
        throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
      }

      return parsedResponse;
    } catch (error: any) {
      if (error.message?.includes('JSON')) {
        throw new Error('Erro ao processar resposta da IA. Tente novamente.');
      }
      throw error;
    }
  }

  // Gerar flashcards a partir de PDF (conte√∫do extra√≠do)
  static async generateFromPDF(params: AIFlashcardParams): Promise<AIFlashcardResponse> {
    if (!params.pdfContent) {
      throw new Error('Conte√∫do do PDF √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 15;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais. Sua tarefa √© analisar o conte√∫do extra√≠do de um PDF e criar flashcards de alta qualidade baseados no material.

CONTE√öDO DO PDF:
"${params.pdfContent}"

INSTRU√á√ïES ESPEC√çFICAS:
- Crie exatamente ${numberOfCards} flashcards baseados no conte√∫do do PDF
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- Identifique e extraia os conceitos mais importantes do documento
- Foque em defini√ß√µes, processos, f√≥rmulas, e conceitos-chave
- Cada flashcard deve testar a compreens√£o do material
- Inclua dicas quando apropriado
- Adicione tags relevantes baseadas no conte√∫do

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome do deck baseado no conte√∫do do PDF",
  "description": "Descri√ß√£o breve do deck baseada no documento",
  "flashcards": [
    {
      "front": "Pergunta baseada no conte√∫do do PDF",
      "back": "Resposta extra√≠da do documento",
      "hint": "Dica opcional relacionada ao conte√∫do",
      "tags": ["tag1", "tag2", "tag3"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS IMPORTANTES:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Base todas as perguntas e respostas no conte√∫do do PDF
3. N√£o invente informa√ß√µes que n√£o estejam no documento
4. Priorize conceitos fundamentais e defini√ß√µes importantes
5. Se houver f√≥rmulas ou processos, inclua-os nos flashcards
6. Inclua pelo menos 3 tags relevantes por flashcard baseadas no conte√∫do
7. Organize as informa√ß√µes de forma did√°tica e clara
`;

    try {
      const response = await this.callGroqAPI(prompt);
      const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
      
      // Validar a resposta
      if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
        throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
      }

      return parsedResponse;
    } catch (error: any) {
      if (error.message?.includes('JSON')) {
        throw new Error('Erro ao processar resposta da IA. Tente novamente.');
      }
      throw error;
    }
  }
}