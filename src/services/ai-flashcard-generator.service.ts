import { getAccessToken } from '@/lib/auth-utils';

export interface AIFlashcardParams {
  theme?: string;
  text?: string;
  pdfContent?: string;
  deckName: string;
  numberOfCards?: number;
  difficulty?: 'easy' | 'medium' | 'hard';
  language?: string;
}

export interface AIGeneratedFlashcard {
  front: string;
  back: string;
  hint?: string;
  tags?: string[];
  difficulty: 'easy' | 'medium' | 'hard';
}

export interface AIFlashcardResponse {
  deckName: string;
  description: string;
  flashcards: AIGeneratedFlashcard[];
}

export interface FlashcardJob {
  id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  result_data?: AIFlashcardResponse;
  error_message?: string;
  created_at: string;
  updated_at: string;
  completed_at?: string;
}

export class AIFlashcardGeneratorService {
  // Cria um job ass√≠ncrono para processamento de flashcards
  private static async createJob(prompt: string): Promise<{ jobId: string; status: string; message: string }> {
    try {
      console.log('üöÄ AIFlashcardGeneratorService: Criando job ass√≠ncrono...');
      
      // Obter token de acesso para autentica√ß√£o
      const accessToken = await getAccessToken();
      
      console.log('üîë AIFlashcardGeneratorService: Token obtido:', accessToken ? 'SIM' : 'N√ÉO');
      
      if (!accessToken) {
        console.error('‚ùå AIFlashcardGeneratorService: Token de acesso n√£o dispon√≠vel');
        throw new Error('Voc√™ precisa estar logado para gerar flashcards com IA');
      }

      if (!response.ok) {
        throw new Error('Erro ao rastrear progresso');
      }

      return await response.json();
    } catch (error) {
      console.error('Erro ao rastrear progresso:', error);
      throw error;
    }
  }

  // M√©todo privado para chamar a API Groq
  private static async callGroqAPI(prompt: string, retryCount = 0): Promise<string> {
    const maxRetries = 3;
    
    try {
      const token = await getAccessToken();
      const response = await fetch('/api/groq/flashcards', {
        method: 'POST',
        headers,
        credentials: 'include',
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        // Tratar erros espec√≠ficos de permiss√£o e limite
        if (response.status === 401) {
          throw new Error('Voc√™ precisa estar logado para gerar flashcards com IA.');
        }
        
        if (response.status === 403) {
          if (errorData.requiresUpgrade) {
            throw new Error('A gera√ß√£o de flashcards por IA √© exclusiva para usu√°rios Pro e Pro+. Fa√ßa upgrade do seu plano para acessar este recurso.');
          }
          throw new Error('Voc√™ n√£o tem permiss√£o para acessar este recurso.');
        }
        
        if (response.status === 401) {
          throw new Error('Erro de autentica√ß√£o. Fa√ßa login novamente.');
        }
        
        if (response.status === 400) {
          throw new Error(errorData.error || 'Dados inv√°lidos enviados para a API.');
        }
        
        throw new Error(errorData.error || `Erro na API: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error: any) {
      console.error('Erro ao criar job de flashcards:', error);
      throw error;
    }
  }

  // Consulta o status de um job
  private static async getJobStatus(jobId: string): Promise<FlashcardJob> {
    try {
      const accessToken = await getAccessToken();
      
      if (!accessToken) {
        throw new Error('Voc√™ precisa estar logado para consultar o status do job');
      }

      const headers: Record<string, string> = {
        'Authorization': `Bearer ${accessToken}`,
      };

      const response = await fetch(`/api/jobs/flashcards/${jobId}`, {
        method: 'GET',
        headers,
        credentials: 'include',
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Erro desconhecido' }));
        throw new Error(errorData.error || `Erro ao consultar job: ${response.status}`);
      }
      
      const data = await response.json();
      return data;
    } catch (error: any) {
      console.error('Erro ao consultar status do job:', error);
      throw error;
    }
  }

  // Aguarda a conclus√£o de um job com polling
  private static async waitForJobCompletion(jobId: string, onProgress?: (status: string) => void): Promise<AIFlashcardResponse> {
    const maxAttempts = 60; // 5 minutos (5 segundos * 60) - reduzido de 10 para 5 minutos
    const pollInterval = 5000; // 5 segundos
    const startTime = Date.now();
    const maxDuration = 5 * 60 * 1000; // 5 minutos em millisegundos
    let attempts = 0;
    let consecutiveErrors = 0;
    const maxConsecutiveErrors = 3;
    
    console.log(`üîÑ Iniciando polling para job ${jobId} (m√°ximo ${maxAttempts} tentativas)`);
    
    while (attempts < maxAttempts) {
      try {
        // Verificar timeout por tempo absoluto tamb√©m
        if (Date.now() - startTime > maxDuration) {
          console.error(`‚è∞ Timeout absoluto atingido para job ${jobId} ap√≥s ${Math.round((Date.now() - startTime) / 1000)}s`);
          throw new Error('Timeout: O processamento excedeu o tempo limite de 5 minutos.');
        }

        const job = await this.getJobStatus(jobId);
        consecutiveErrors = 0; // Reset contador de erros consecutivos
        
        console.log(`üìä Job ${jobId} - Status: ${job.status}, Tentativa: ${attempts + 1}/${maxAttempts}`);
        
        if (onProgress) {
          onProgress(job.status);
        }
        
        if (job.status === 'completed') {
          console.log(`‚úÖ Job ${jobId} conclu√≠do com sucesso`);
          if (job.result_data) {
            // Garantir que result_data seja um objeto, n√£o uma string
            let resultData = job.result_data;
            
            // Se result_data for uma string, fazer parse
            if (typeof resultData === 'string') {
              try {
                console.log('Tentando fazer parse do JSON. Tamanho:', resultData.length);
                console.log('Primeiros 200 caracteres:', resultData.substring(0, 200));
                console.log('√öltimos 200 caracteres:', resultData.substring(resultData.length - 200));
                
                resultData = JSON.parse(resultData);
              } catch (error) {
                console.error('Erro ao fazer parse do result_data:', error);
                console.error('JSON malformado. Tamanho:', resultData.length);
                
                // Mostrar contexto ao redor do erro se poss√≠vel
                if (error instanceof SyntaxError && error.message.includes('position')) {
                  const match = error.message.match(/position (\d+)/);
                  if (match) {
                    const position = parseInt(match[1]);
                    const start = Math.max(0, position - 100);
                    const end = Math.min(resultData.length, position + 100);
                    console.error('Contexto do erro (posi√ß√£o', position, '):', resultData.substring(start, end));
                  }
                }
                
                throw new Error(`Erro ao processar dados do resultado: ${error.message}`);
              }
            }
            
            return resultData;
          } else {
            throw new Error('Job conclu√≠do mas sem dados de resultado');
          }
        }
        
        if (job.status === 'failed') {
          console.error(`‚ùå Job ${jobId} falhou: ${job.error_message}`);
          throw new Error(job.error_message || 'Falha no processamento dos flashcards');
        }
        
        // Aguardar antes da pr√≥xima verifica√ß√£o
        await new Promise(resolve => setTimeout(resolve, pollInterval));
        attempts++;
        
      } catch (error: any) {
        consecutiveErrors++;
        console.error(`‚ùå Erro ao verificar status do job ${jobId} (tentativa ${attempts + 1}, erro consecutivo ${consecutiveErrors}):`, error);
        
        // Se muitos erros consecutivos, parar
        if (consecutiveErrors >= maxConsecutiveErrors) {
          console.error(`üö´ Muitos erros consecutivos (${consecutiveErrors}) para job ${jobId}, parando polling`);
          throw new Error(`Muitos erros consecutivos ao verificar status do job. √öltimo erro: ${error.message}`);
        }
        
        // Se for erro de rede, tentar novamente ap√≥s um delay maior
        if (error.message?.includes('fetch') || error.name === 'TypeError') {
          console.log(`üîÑ Erro de rede para job ${jobId}, tentando novamente em 10s...`);
          await new Promise(resolve => setTimeout(resolve, 10000)); // 10 segundos para erros de rede
          attempts++;
          continue;
        }
        
        // Para outros erros, falhar imediatamente
        throw error;
      }
    }
    
    console.error(`‚è∞ Timeout por tentativas para job ${jobId} ap√≥s ${attempts} tentativas`);
    throw new Error('Timeout: O processamento est√° demorando mais que o esperado. Tente novamente mais tarde.');
  }

  // M√©todo principal para chamar a API com sistema ass√≠ncrono
  private static async callGroqAPI(prompt: string, onProgress?: (status: string) => void): Promise<AIFlashcardResponse> {
    try {
      // Criar o job
      const jobResponse = await this.createJob(prompt);
      console.log('üìã Job criado:', jobResponse);
      
      if (onProgress) {
        onProgress('processing');
      }
      
      // Aguardar conclus√£o do job
      const result = await this.waitForJobCompletion(jobResponse.jobId, onProgress);
      
      // Retornar o resultado diretamente
      return result;
      
    } catch (error: any) {
      console.error('Erro no processamento ass√≠ncrono:', error);
      throw error;
    }
  }

  // Gerar flashcards a partir de um tema
  static async generateFromTheme(params: AIFlashcardParams, onProgress?: (status: string) => void): Promise<AIFlashcardResponse> {
    if (!params.theme) {
      throw new Error('Tema √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 10;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais otimizados para m√°ximo aprendizado. Sua miss√£o √© criar os ${numberOfCards} MELHORES flashcards poss√≠veis sobre "${params.theme}" que maximizem a reten√ß√£o e compreens√£o do estudante.

ESTRAT√âGIA PEDAG√ìGICA AVAN√áADA:
- Aplique a t√©cnica de REPETI√á√ÉO ESPA√áADA: crie flashcards que se complementem e reforcem conceitos
- Use o princ√≠pio da RECUPERA√á√ÉO ATIVA: formule perguntas que exijam recorda√ß√£o, n√£o apenas reconhecimento
- Implemente CONEX√ïES CONCEITUAIS: relacione conceitos entre si para criar uma rede de conhecimento
- Aplique a PIR√ÇMIDE DE BLOOM: varie entre memoriza√ß√£o, compreens√£o, aplica√ß√£o, an√°lise e s√≠ntese

DISTRIBUI√á√ÉO INTELIGENTE DOS ${numberOfCards} FLASHCARDS:
- 30% Conceitos fundamentais e defini√ß√µes essenciais
- 25% Aplica√ß√µes pr√°ticas e exemplos reais
- 20% Rela√ß√µes entre conceitos e compara√ß√µes
- 15% Casos espec√≠ficos e detalhes importantes
- 10% Perguntas de s√≠ntese e pensamento cr√≠tico

INSTRU√á√ïES ESPEC√çFICAS:
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- PRIORIZE os conceitos mais impactantes para o aprendizado do tema
- Cada flashcard deve ser √öNICO e complementar os outros
- Varie os tipos de pergunta: "O que √©?", "Como funciona?", "Por que?", "Quando usar?", "Compare X e Y"
- Use t√©cnicas mnem√¥nicas quando apropriado
- Inclua contexto suficiente para evitar ambiguidade

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome educativo e motivador do deck",
  "description": "Descri√ß√£o que destaque o valor educacional",
  "flashcards": [
    {
      "front": "Pergunta estrat√©gica que promove recupera√ß√£o ativa",
      "back": "Resposta completa com explica√ß√£o clara e contexto",
      "hint": "Dica pedag√≥gica que guia o racioc√≠nio sem dar a resposta",
      "tags": ["conceito-chave", "categoria", "aplica√ß√£o"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS CR√çTICAS:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Cada flashcard deve ser ESSENCIAL para dominar o tema
3. Evite redund√¢ncia - cada card deve ensinar algo √∫nico
4. Use linguagem precisa e educativa para o n√≠vel ${difficulty}
5. Crie uma progress√£o l√≥gica do b√°sico ao avan√ßado
6. Inclua pelo menos 3 tags estrat√©gicas por flashcard
7. As dicas devem estimular o pensamento, n√£o dar respostas diretas

TEMA PARA DOMINAR: ${params.theme}
`;

    try {
      const response = await this.callGroqAPI(prompt, onProgress);
      
      // Debug: Log da resposta completa
      console.log('üîç DEBUG - Resposta completa da IA:', JSON.stringify(response, null, 2));
      console.log('üîç DEBUG - Tipo da resposta:', typeof response);
      console.log('üîç DEBUG - response.flashcards existe?', 'flashcards' in response);
      console.log('üîç DEBUG - response.flashcards √© array?', Array.isArray(response.flashcards));
      console.log('üîç DEBUG - Propriedades da resposta:', Object.keys(response));
      
      // Validar a resposta com logs mais espec√≠ficos
      if (!response) {
        throw new Error('Resposta da IA inv√°lida: resposta √© null ou undefined');
      }
      
      if (!response.flashcards) {
        throw new Error('Resposta da IA inv√°lida: propriedade flashcards n√£o encontrada');
      }
      
      if (!Array.isArray(response.flashcards)) {
        throw new Error(`Resposta da IA inv√°lida: flashcards n√£o √© um array (tipo: ${typeof response.flashcards})`);
      }
      
      if (response.flashcards.length === 0) {
        throw new Error('Resposta da IA inv√°lida: array de flashcards est√° vazio');
      }
      
      // Se a resposta √© uma string, tenta fazer parse JSON
      if (typeof response === 'string') {
        try {
          const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
          
          // Validar a resposta
          if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
            throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
          }

      return response;
    } catch (error: any) {
      console.error('Erro no generateFromTheme:', error);
      
      // Se o erro j√° √© uma mensagem amig√°vel, mant√©m
      if (error.message?.includes('Resposta da IA inv√°lida') || 
          error.message?.includes('Erro ao processar resposta da IA') ||
          error.message?.includes('Formato de resposta inesperado')) {
        throw error;
      }
      
      // Para outros erros, usar mensagem gen√©rica
      throw new Error('Erro ao processar resposta da IA. Tente novamente.');
    }
  }

  // Gerar flashcards a partir de texto
  static async generateFromText(params: AIFlashcardParams, onProgress?: (status: string) => void): Promise<AIFlashcardResponse> {
    if (!params.text) {
      throw new Error('Texto √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 10;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais otimizados para m√°ximo aprendizado. Sua miss√£o √© criar os ${numberOfCards} MELHORES flashcards poss√≠veis baseados no texto fornecido que maximizem a reten√ß√£o e compreens√£o do estudante.

TEXTO PARA AN√ÅLISE E OTIMIZA√á√ÉO:
"${params.text}"

ESTRAT√âGIA PEDAG√ìGICA AVAN√áADA:
- Aplique a t√©cnica de EXTRA√á√ÉO INTELIGENTE: identifique os conceitos mais valiosos do texto
- Use o princ√≠pio da RECUPERA√á√ÉO ATIVA: transforme informa√ß√µes passivas em perguntas ativas
- Implemente CONEX√ïES CONCEITUAIS: relacione diferentes partes do texto entre si
- Aplique a PIR√ÇMIDE DE BLOOM: varie entre memoriza√ß√£o, compreens√£o, aplica√ß√£o, an√°lise e s√≠ntese

DISTRIBUI√á√ÉO INTELIGENTE DOS ${numberOfCards} FLASHCARDS:
- 35% Conceitos-chave e defini√ß√µes extra√≠das do texto
- 25% Aplica√ß√µes e exemplos mencionados no texto
- 20% Rela√ß√µes causais e processos descritos
- 15% Detalhes importantes e dados espec√≠ficos
- 5% Perguntas de s√≠ntese que conectam todo o conte√∫do

INSTRU√á√ïES ESPEC√çFICAS:
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- EXTRAIA apenas os conceitos mais impactantes do texto fornecido
- Cada flashcard deve testar uma compreens√£o √∫nica do conte√∫do
- Transforme informa√ß√µes declarativas em perguntas desafiadoras
- Use o contexto do texto para criar perguntas precisas
- Varie os tipos: defini√ß√µes, causas/efeitos, compara√ß√µes, aplica√ß√µes

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome educativo baseado no conte√∫do principal do texto",
  "description": "Descri√ß√£o que destaque os principais aprendizados do texto",
  "flashcards": [
    {
      "front": "Pergunta estrat√©gica baseada no texto que promove recupera√ß√£o ativa",
      "back": "Resposta extra√≠da/inferida do texto com explica√ß√£o clara",
      "hint": "Dica que referencia o contexto do texto sem dar a resposta",
      "tags": ["conceito-do-texto", "categoria", "aplica√ß√£o"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS CR√çTICAS:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Cada flashcard deve ser ESSENCIAL para dominar o conte√∫do do texto
3. Evite redund√¢ncia - cada card deve testar uma compreens√£o √∫nica
4. Use linguagem precisa e educativa para o n√≠vel ${difficulty}
5. Mantenha fidelidade ao conte√∫do original do texto
6. Inclua pelo menos 3 tags estrat√©gicas baseadas no texto
7. As dicas devem referenciar o contexto sem revelar respostas
8. Priorize informa√ß√µes que o estudante DEVE saber sobre este texto
`;

    try {
      const response = await this.callGroqAPI(prompt, onProgress);
      
      // Debug: Log da resposta completa
      console.log('üîç DEBUG - Resposta completa da IA (generateFromText):', JSON.stringify(response, null, 2));
      console.log('üîç DEBUG - Tipo da resposta:', typeof response);
      console.log('üîç DEBUG - response.flashcards existe?', 'flashcards' in response);
      console.log('üîç DEBUG - response.flashcards √© array?', Array.isArray(response.flashcards));
      console.log('üîç DEBUG - Propriedades da resposta:', Object.keys(response));
      
      // Validar a resposta com logs mais espec√≠ficos
      if (!response) {
        throw new Error('Resposta da IA inv√°lida: resposta √© null ou undefined');
      }
      
      if (!response.flashcards) {
        throw new Error('Resposta da IA inv√°lida: propriedade flashcards n√£o encontrada');
      }
      
      if (!Array.isArray(response.flashcards)) {
        throw new Error(`Resposta da IA inv√°lida: flashcards n√£o √© um array (tipo: ${typeof response.flashcards})`);
      }
      
      if (response.flashcards.length === 0) {
        throw new Error('Resposta da IA inv√°lida: array de flashcards est√° vazio');
      }
      
      // Se a resposta √© uma string, tenta fazer parse JSON
      if (typeof response === 'string') {
        try {
          const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
          
          // Validar a resposta
          if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
            throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
          }

      return response;
    } catch (error: any) {
      console.error('Erro no generateFromText:', error);
      
      // Se o erro j√° √© uma mensagem amig√°vel, mant√©m
      if (error.message?.includes('Resposta da IA inv√°lida') || 
          error.message?.includes('Erro ao processar resposta da IA') ||
          error.message?.includes('Formato de resposta inesperado')) {
        throw error;
      }
      
      // Para outros erros, usar mensagem gen√©rica
      throw new Error('Erro ao processar resposta da IA. Tente novamente.');
    }
  }

  // Gerar flashcards a partir de PDF (conte√∫do extra√≠do)
  static async generateFromPDF(params: AIFlashcardParams, onProgress?: (status: string) => void): Promise<AIFlashcardResponse> {
    if (!params.pdfContent) {
      throw new Error('Conte√∫do do PDF √© obrigat√≥rio para gerar flashcards');
    }

    const numberOfCards = params.numberOfCards || 15;
    const difficulty = params.difficulty || 'medium';
    const language = params.language || 'portugu√™s brasileiro';

    const prompt = `
Voc√™ √© um especialista em educa√ß√£o e cria√ß√£o de flashcards educacionais otimizados para m√°ximo aprendizado. Sua miss√£o √© criar os ${numberOfCards} MELHORES flashcards poss√≠veis baseados no conte√∫do do PDF que maximizem a reten√ß√£o e compreens√£o do estudante.

CONTE√öDO DO PDF PARA AN√ÅLISE E OTIMIZA√á√ÉO:
"${params.pdfContent}"

ESTRAT√âGIA PEDAG√ìGICA AVAN√áADA:
- Aplique a t√©cnica de MINERA√á√ÉO DE CONHECIMENTO: extraia os conceitos mais valiosos do documento
- Use o princ√≠pio da RECUPERA√á√ÉO ATIVA: transforme informa√ß√µes passivas em perguntas desafiadoras
- Implemente CONEX√ïES CONCEITUAIS: relacione diferentes se√ß√µes do documento
- Aplique a PIR√ÇMIDE DE BLOOM: varie entre memoriza√ß√£o, compreens√£o, aplica√ß√£o, an√°lise e s√≠ntese

DISTRIBUI√á√ÉO INTELIGENTE DOS ${numberOfCards} FLASHCARDS:
- 30% Conceitos fundamentais e defini√ß√µes-chave do documento
- 25% Processos, procedimentos e metodologias descritas
- 20% F√≥rmulas, dados espec√≠ficos e informa√ß√µes t√©cnicas
- 15% Aplica√ß√µes pr√°ticas e exemplos mencionados
- 10% Perguntas de s√≠ntese que integram todo o conte√∫do

INSTRU√á√ïES ESPEC√çFICAS:
- N√≠vel de dificuldade: ${difficulty}
- Idioma: ${language}
- IDENTIFIQUE e extraia apenas os conceitos mais impactantes do documento
- Cada flashcard deve testar uma compreens√£o √∫nica do material
- Priorize defini√ß√µes, processos, f√≥rmulas e conceitos-chave
- Use terminologia t√©cnica apropriada quando presente no documento
- Varie os tipos: defini√ß√µes, procedimentos, c√°lculos, aplica√ß√µes

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "deckName": "Nome educativo baseado no conte√∫do principal do PDF",
  "description": "Descri√ß√£o que destaque os principais aprendizados do documento",
  "flashcards": [
    {
      "front": "Pergunta estrat√©gica baseada no PDF que promove recupera√ß√£o ativa",
      "back": "Resposta extra√≠da do documento com explica√ß√£o clara e contexto",
      "hint": "Dica que referencia o material sem revelar a resposta",
      "tags": ["conceito-do-pdf", "categoria", "aplica√ß√£o"],
      "difficulty": "${difficulty}"
    }
  ]
}

REGRAS CR√çTICAS:
1. Retorne APENAS o JSON v√°lido, sem texto adicional
2. Cada flashcard deve ser ESSENCIAL para dominar o conte√∫do do PDF
3. Evite redund√¢ncia - cada card deve testar uma compreens√£o √∫nica
4. Use linguagem precisa e t√©cnica apropriada para o n√≠vel ${difficulty}
5. Mantenha fidelidade absoluta ao conte√∫do original do documento
6. Inclua pelo menos 3 tags estrat√©gicas baseadas no conte√∫do
7. As dicas devem referenciar o contexto do documento
8. Priorize informa√ß√µes que o estudante DEVE dominar deste material
9. Se houver f√≥rmulas ou dados t√©cnicos, inclua-os estrategicamente
`;

    try {
      const response = await this.callGroqAPI(prompt, onProgress);
      
      // Debug: Log da resposta completa
      console.log('üîç DEBUG - Resposta completa da IA (generateFromPDF):', JSON.stringify(response, null, 2));
      console.log('üîç DEBUG - Tipo da resposta:', typeof response);
      console.log('üîç DEBUG - response.flashcards existe?', 'flashcards' in response);
      console.log('üîç DEBUG - response.flashcards √© array?', Array.isArray(response.flashcards));
      console.log('üîç DEBUG - Propriedades da resposta:', Object.keys(response));
      
      // Validar a resposta com logs mais espec√≠ficos
      if (!response) {
        throw new Error('Resposta da IA inv√°lida: resposta √© null ou undefined');
      }
      
      if (!response.flashcards) {
        throw new Error('Resposta da IA inv√°lida: propriedade flashcards n√£o encontrada');
      }
      
      if (!Array.isArray(response.flashcards)) {
        throw new Error(`Resposta da IA inv√°lida: flashcards n√£o √© um array (tipo: ${typeof response.flashcards})`);
      }
      
      if (response.flashcards.length === 0) {
        throw new Error('Resposta da IA inv√°lida: array de flashcards est√° vazio');
      }
      
      // Se a resposta √© uma string, tenta fazer parse JSON
      if (typeof response === 'string') {
        try {
          const parsedResponse = JSON.parse(response) as AIFlashcardResponse;
          
          // Validar a resposta
          if (!parsedResponse.flashcards || !Array.isArray(parsedResponse.flashcards)) {
            throw new Error('Resposta da IA inv√°lida: flashcards n√£o encontrados');
          }

      return response;
    } catch (error: any) {
      console.error('Erro no generateFromPDF:', error);
      
      // Se o erro j√° √© uma mensagem amig√°vel, mant√©m
      if (error.message?.includes('Resposta da IA inv√°lida') || 
          error.message?.includes('Erro ao processar resposta da IA') ||
          error.message?.includes('Formato de resposta inesperado')) {
        throw error;
      }
      
      // Para outros erros, usar mensagem gen√©rica
      throw new Error('Erro ao processar resposta da IA. Tente novamente.');
    }
  }
}