-- Tabela para os planos de estudo inteligente
CREATE TABLE IF NOT EXISTS smart_plans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'draft',
  settings JSONB NOT NULL DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Tabela para as sessões de estudo dos planos
CREATE TABLE IF NOT EXISTS smart_plan_sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  plan_id BIGINT NOT NULL REFERENCES smart_plans(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  discipline_id BIGINT REFERENCES disciplines(id) ON DELETE SET NULL,
  subject_id BIGINT REFERENCES subjects(id) ON DELETE SET NULL,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  duration_minutes INTEGER NOT NULL,
  is_revision BOOLEAN DEFAULT FALSE,
  original_session_id BIGINT REFERENCES smart_plan_sessions(id) ON DELETE SET NULL,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);

-- Políticas RLS para smart_plans
CREATE POLICY "Usuários podem ver seus planos" ON smart_plans
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem criar seus planos" ON smart_plans
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Usuários podem atualizar seus planos" ON smart_plans
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Usuários podem excluir seus planos" ON smart_plans
  FOR DELETE USING (auth.uid() = user_id);

-- Políticas RLS para smart_plan_sessions
CREATE POLICY "Usuários podem ver suas sessões de plano" ON smart_plan_sessions
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem criar suas sessões de plano" ON smart_plan_sessions
  FOR INSERT WITH CHECK (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem atualizar suas sessões de plano" ON smart_plan_sessions
  FOR UPDATE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

CREATE POLICY "Usuários podem excluir suas sessões de plano" ON smart_plan_sessions
  FOR DELETE USING (EXISTS (
    SELECT 1 FROM smart_plans WHERE id = smart_plan_sessions.plan_id AND user_id = auth.uid()
  ));

-- Ativar RLS nas tabelas
ALTER TABLE smart_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE smart_plan_sessions ENABLE ROW LEVEL SECURITY;

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_smart_plans_user_id ON smart_plans(user_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_plan_id ON smart_plan_sessions(plan_id);
CREATE INDEX IF NOT EXISTS idx_smart_plan_sessions_date ON smart_plan_sessions(date); 